{
    "pr_title": "cluster mempool: Implement changeset interface for mempool #31122",
    "head": "32ac5cd59b1fc4819de26ce52b439317149ca5de",
    "diffs": [
        {
            "filename": "src/test/mempool_tests.cpp",
            "mutation_score": 0.9130434782608695,
            "head": "32ac5cd59b1fc4819de26ce52b439317149ca5de",
            "date": "23/10/2024 08:02:49",
            "diffs": [
                "diff --git a/src/test/mempool_tests.cpp b/./muts-pr-31122-mempool_tests-cpp/mempool_tests.mutant.35.cpp\nindex f0094dce59..91f81e5d72 100644\n--- a/src/test/mempool_tests.cpp\n+++ b/./muts-pr-31122-mempool_tests-cpp/mempool_tests.mutant.35.cpp\n@@ -554,7 +554,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(GenTxid::Txid(tx7.GetHash())));\n \n     AddToMempool(pool, entry.Fee(1000LL).FromTx(tx5));\n-    AddToMempool(pool, entry.Fee(9000LL).FromTx(tx7));\n+    \n \n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);\n",
                "diff --git a/src/test/mempool_tests.cpp b/./muts-pr-31122-mempool_tests-cpp/mempool_tests.mutant.34.cpp\nindex f0094dce59..04a929e07c 100644\n--- a/src/test/mempool_tests.cpp\n+++ b/./muts-pr-31122-mempool_tests-cpp/mempool_tests.mutant.34.cpp\n@@ -553,7 +553,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(pool.exists(GenTxid::Txid(tx6.GetHash())));\n     BOOST_CHECK(!pool.exists(GenTxid::Txid(tx7.GetHash())));\n \n-    AddToMempool(pool, entry.Fee(1000LL).FromTx(tx5));\n+    \n     AddToMempool(pool, entry.Fee(9000LL).FromTx(tx7));\n \n     std::vector<CTransactionRef> vtx;\n",
                "diff --git a/src/test/mempool_tests.cpp b/./muts-pr-31122-mempool_tests-cpp/mempool_tests.mutant.31.cpp\nindex f0094dce59..fbc899ae4d 100644\n--- a/src/test/mempool_tests.cpp\n+++ b/./muts-pr-31122-mempool_tests-cpp/mempool_tests.mutant.31.cpp\n@@ -535,7 +535,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     AddToMempool(pool, entry.Fee(7000LL).FromTx(tx4));\n     AddToMempool(pool, entry.Fee(1000LL).FromTx(tx5));\n     AddToMempool(pool, entry.Fee(1100LL).FromTx(tx6));\n-    AddToMempool(pool, entry.Fee(9000LL).FromTx(tx7));\n+    \n \n     // we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n",
                "diff --git a/src/test/mempool_tests.cpp b/./muts-pr-31122-mempool_tests-cpp/mempool_tests.mutant.25.cpp\nindex f0094dce59..f94c912471 100644\n--- a/src/test/mempool_tests.cpp\n+++ b/./muts-pr-31122-mempool_tests-cpp/mempool_tests.mutant.25.cpp\n@@ -451,7 +451,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n     tx2.vout[0].nValue = 10 * COIN;\n-    AddToMempool(pool, entry.Fee(5000LL).FromTx(tx2));\n+    \n \n     pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n     BOOST_CHECK(pool.exists(GenTxid::Txid(tx1.GetHash())));\n"
            ]
        },
        {
            "filename": "src/test/miner_tests.cpp",
            "mutation_score": 0.7419354838709677,
            "head": "32ac5cd59b1fc4819de26ce52b439317149ca5de",
            "date": "23/10/2024 08:09:38",
            "diffs": [
                "diff --git a/src/test/miner_tests.cpp b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.10.cpp\nindex f6ae6549bc..440ef4733c 100644\n--- a/src/test/miner_tests.cpp\n+++ b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.10.cpp\n@@ -264,7 +264,7 @@ void MinerTestingSetup::TestBasicMining(const CScript& scriptPubKey, const std::\n             hash = tx.GetHash();\n             bool spendsCoinbase = i == 0; // only first tx spends coinbase\n             // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n-            AddToMempool(tx_mempool, entry.Fee(LOWFEE).Time(Now<NodeSeconds>()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n+            \n             tx.vin[0].prevout.hash = hash;\n         }\n         BOOST_CHECK(AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey));\n",
                "diff --git a/src/test/miner_tests.cpp b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.11.cpp\nindex f6ae6549bc..b322bf2003 100644\n--- a/src/test/miner_tests.cpp\n+++ b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.11.cpp\n@@ -288,7 +288,7 @@ void MinerTestingSetup::TestBasicMining(const CScript& scriptPubKey, const std::\n             tx.vout[0].nValue -= LOWFEE;\n             hash = tx.GetHash();\n             bool spendsCoinbase = i == 0; // only first tx spends coinbase\n-            AddToMempool(tx_mempool, entry.Fee(LOWFEE).Time(Now<NodeSeconds>()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+            \n             tx.vin[0].prevout.hash = hash;\n         }\n         BOOST_CHECK(AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey));\n",
                "diff --git a/src/test/miner_tests.cpp b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.16.cpp\nindex f6ae6549bc..0ba74ec8a1 100644\n--- a/src/test/miner_tests.cpp\n+++ b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.16.cpp\n@@ -351,7 +351,7 @@ void MinerTestingSetup::TestBasicMining(const CScript& scriptPubKey, const std::\n         tx.vout[0].nValue = BLOCKSUBSIDY - HIGHFEE;\n         tx.vout[0].scriptPubKey = CScript() << OP_1;\n         hash = tx.GetHash();\n-        AddToMempool(tx_mempool, entry.Fee(HIGHFEE).Time(Now<NodeSeconds>()).SpendsCoinbase(true).FromTx(tx));\n+        \n         tx.vout[0].scriptPubKey = CScript() << OP_2;\n         hash = tx.GetHash();\n         AddToMempool(tx_mempool, entry.Fee(HIGHFEE).Time(Now<NodeSeconds>()).SpendsCoinbase(true).FromTx(tx));\n",
                "diff --git a/src/test/miner_tests.cpp b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.4.cpp\nindex f6ae6549bc..b528ac2ce9 100644\n--- a/src/test/miner_tests.cpp\n+++ b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.4.cpp\n@@ -157,7 +157,7 @@ void MinerTestingSetup::TestPackageSelection(const CScript& scriptPubKey, const\n     tx.vin[0].prevout.hash = hashFreeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     Txid hashLowFeeTx = tx.GetHash();\n-    AddToMempool(tx_mempool, entry.Fee(feeToUse).FromTx(tx));\n+    \n     pblocktemplate = AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n",
                "diff --git a/src/test/miner_tests.cpp b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.17.cpp\nindex f6ae6549bc..ea58aa754b 100644\n--- a/src/test/miner_tests.cpp\n+++ b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.17.cpp\n@@ -354,7 +354,7 @@ void MinerTestingSetup::TestBasicMining(const CScript& scriptPubKey, const std::\n         AddToMempool(tx_mempool, entry.Fee(HIGHFEE).Time(Now<NodeSeconds>()).SpendsCoinbase(true).FromTx(tx));\n         tx.vout[0].scriptPubKey = CScript() << OP_2;\n         hash = tx.GetHash();\n-        AddToMempool(tx_mempool, entry.Fee(HIGHFEE).Time(Now<NodeSeconds>()).SpendsCoinbase(true).FromTx(tx));\n+        \n         BOOST_CHECK_EXCEPTION(AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     }\n \n",
                "diff --git a/src/test/miner_tests.cpp b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.14.cpp\nindex f6ae6549bc..daa28481be 100644\n--- a/src/test/miner_tests.cpp\n+++ b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.14.cpp\n@@ -321,7 +321,7 @@ void MinerTestingSetup::TestBasicMining(const CScript& scriptPubKey, const std::\n         tx.vin[1].prevout.n = 0;\n         tx.vout[0].nValue = tx.vout[0].nValue + BLOCKSUBSIDY - HIGHERFEE; // First txn output + fresh coinbase - new txn fee\n         hash = tx.GetHash();\n-        AddToMempool(tx_mempool, entry.Fee(HIGHERFEE).Time(Now<NodeSeconds>()).SpendsCoinbase(true).FromTx(tx));\n+        \n         BOOST_CHECK(AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey));\n     }\n \n",
                "diff --git a/src/test/miner_tests.cpp b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.30.cpp\nindex f6ae6549bc..8e0c3e557c 100644\n--- a/src/test/miner_tests.cpp\n+++ b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.30.cpp\n@@ -587,7 +587,7 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     tx.vin[0].prevout.hash = hashFreeChild;\n     tx.vout[0].nValue = 5000000000LL; // 0 fee\n     Txid hashFreeGrandchild = tx.GetHash();\n-    AddToMempool(tx_mempool, entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n+    \n \n     auto pblocktemplate = AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey);\n     BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n",
                "diff --git a/src/test/miner_tests.cpp b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.26.cpp\nindex f6ae6549bc..1108c3b64a 100644\n--- a/src/test/miner_tests.cpp\n+++ b/./muts-pr-31122-miner_tests-cpp/miner_tests.mutant.26.cpp\n@@ -556,7 +556,7 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vout[0].nValue = 5000000000LL - 10000;\n     Txid hashMediumFeeTx = tx.GetHash();\n-    AddToMempool(tx_mempool, entry.Fee(10000).Time(Now<NodeSeconds>()).SpendsCoinbase(true).FromTx(tx));\n+    \n     tx_mempool.PrioritiseTransaction(hashMediumFeeTx, -5 * COIN);\n \n     // This tx also has a low fee, but is prioritised\n"
            ]
        },
        {
            "filename": "src/test/rbf_tests.cpp",
            "mutation_score": 0.7,
            "date": "23/10/2024 10:16:07",
            "head": "32ac5cd59b1fc4819de26ce52b439317149ca5de",
            "diffs": [
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.82.cpp\nindex 3f74dabd87..9773dcc290 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.82.cpp\n@@ -601,7 +601,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n         changeset->StageRemoval(conflict_2_entry);\n         changeset->StageRemoval(conflict_3_entry);\n         changeset->StageRemoval(conflict_1_child_entry);\n-        changeset->StageAddition(replacement_tx, high_fee, 0, 1, 0, false, 4, LockPoints());\n+        \n         const auto replace_multiple_clusters_2{changeset->CalculateChunksForRBF()};\n \n         BOOST_CHECK(replace_multiple_clusters_2.has_value());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.42.cpp\nindex 3f74dabd87..e274bc8f65 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.42.cpp\n@@ -427,7 +427,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n     changeset->StageAddition(entry4.GetSharedTx(), tx2_fee, 0, 1, 0, false, 4, LockPoints());\n     BOOST_CHECK(ImprovesFeerateDiagram(*changeset) == std::nullopt);\n-    changeset.reset();\n+    \n \n     // Adding a grandchild makes the cluster size 3, which is uncalculable\n     const auto tx5 = make_tx(/*inputs=*/ {tx2}, /*output_values=*/ {995 * CENT});\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.56.cpp\nindex 3f74dabd87..abf24cd505 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.56.cpp\n@@ -502,7 +502,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n     {\n         auto changeset = pool.GetChangeSet();\n         changeset->StageRemoval(entry_low);\n-        changeset->StageRemoval(entry_high);\n+        \n         changeset->StageAddition(replacement_tx, high_fee, 0, 1, 0, false, 4, LockPoints());\n         const auto replace_single_chunk{changeset->CalculateChunksForRBF()};\n         BOOST_CHECK(replace_single_chunk.has_value());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.84.cpp\nindex 3f74dabd87..589ff1e084 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.84.cpp\n@@ -616,7 +616,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n \n     {\n         auto changeset = pool.GetChangeSet();\n-        changeset->StageRemoval(conflict_1_entry);\n+        \n         changeset->StageRemoval(conflict_2_entry);\n         changeset->StageRemoval(conflict_3_entry);\n         changeset->StageRemoval(conflict_1_child_entry);\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.47.cpp\nindex 3f74dabd87..1f45bbc866 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.47.cpp\n@@ -437,7 +437,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     changeset = pool.GetChangeSet();\n     changeset->StageRemoval(entry1);\n     changeset->StageRemoval(entry2);\n-    changeset->StageRemoval(entry5);\n+    \n     changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n     changeset->StageAddition(entry4.GetSharedTx(), tx2_fee + entry5->GetModifiedFee() + 1, 0, 1, 0, false, 4, LockPoints());\n     const auto res3 = ImprovesFeerateDiagram(*changeset);\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.46.cpp\nindex 3f74dabd87..726c8e2a9d 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.46.cpp\n@@ -436,7 +436,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n \n     changeset = pool.GetChangeSet();\n     changeset->StageRemoval(entry1);\n-    changeset->StageRemoval(entry2);\n+    \n     changeset->StageRemoval(entry5);\n     changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n     changeset->StageAddition(entry4.GetSharedTx(), tx2_fee + entry5->GetModifiedFee() + 1, 0, 1, 0, false, 4, LockPoints());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.85.cpp\nindex 3f74dabd87..e1659fc348 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.85.cpp\n@@ -617,7 +617,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n     {\n         auto changeset = pool.GetChangeSet();\n         changeset->StageRemoval(conflict_1_entry);\n-        changeset->StageRemoval(conflict_2_entry);\n+        \n         changeset->StageRemoval(conflict_3_entry);\n         changeset->StageRemoval(conflict_1_child_entry);\n         changeset->StageRemoval(conflict_1_grand_child_entry);\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.87.cpp\nindex 3f74dabd87..e7af92bd59 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.87.cpp\n@@ -619,7 +619,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n         changeset->StageRemoval(conflict_1_entry);\n         changeset->StageRemoval(conflict_2_entry);\n         changeset->StageRemoval(conflict_3_entry);\n-        changeset->StageRemoval(conflict_1_child_entry);\n+        \n         changeset->StageRemoval(conflict_1_grand_child_entry);\n         changeset->StageAddition(replacement_tx, high_fee, 0, 1, 0, false, 4, LockPoints());\n         const auto replace_cluster_size_3{changeset->CalculateChunksForRBF()};\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.45.cpp\nindex 3f74dabd87..7c6a8c4d6d 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.45.cpp\n@@ -435,7 +435,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     const auto entry5 = pool.GetIter(tx5->GetHash()).value();\n \n     changeset = pool.GetChangeSet();\n-    changeset->StageRemoval(entry1);\n+    \n     changeset->StageRemoval(entry2);\n     changeset->StageRemoval(entry5);\n     changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.51.cpp\nindex 3f74dabd87..ff0e072e01 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.51.cpp\n@@ -471,7 +471,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n     {\n         auto changeset = pool.GetChangeSet();\n         changeset->StageRemoval(entry_low);\n-        changeset->StageAddition(replacement_tx, 0, 0, 1, 0, false, 4, LockPoints());\n+        \n         const auto replace_one{changeset->CalculateChunksForRBF()};\n         BOOST_CHECK(replace_one.has_value());\n         std::vector<FeeFrac> expected_old_chunks{{low_fee, low_size}};\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.86.cpp\nindex 3f74dabd87..42e2a6d2ec 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.86.cpp\n@@ -618,7 +618,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n         auto changeset = pool.GetChangeSet();\n         changeset->StageRemoval(conflict_1_entry);\n         changeset->StageRemoval(conflict_2_entry);\n-        changeset->StageRemoval(conflict_3_entry);\n+        \n         changeset->StageRemoval(conflict_1_child_entry);\n         changeset->StageRemoval(conflict_1_grand_child_entry);\n         changeset->StageAddition(replacement_tx, high_fee, 0, 1, 0, false, 4, LockPoints());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.22.cpp\nindex 3f74dabd87..51a67292b1 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.22.cpp\n@@ -386,7 +386,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     changeset->StageRemoval(entry1);\n     changeset->StageRemoval(entry2);\n     changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n-    changeset->StageAddition(tx3, tx2_fee, 0, 1, 0, false, 4, LockPoints());\n+    \n     const auto res1 = ImprovesFeerateDiagram(*changeset);\n     BOOST_CHECK(res1.has_value());\n     BOOST_CHECK(res1.value().first == DiagramCheckError::FAILURE);\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.23.cpp\nindex 3f74dabd87..93e0f7db11 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.23.cpp\n@@ -393,7 +393,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     BOOST_CHECK(res1.value().second == \"insufficient feerate: does not improve feerate diagram\");\n \n     // With one more satoshi it does\n-    changeset.reset();\n+    \n     changeset = pool.GetChangeSet();\n     changeset->StageRemoval(entry1);\n     changeset->StageRemoval(entry2);\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.21.cpp\nindex 3f74dabd87..04fac5d5f6 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.21.cpp\n@@ -385,7 +385,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     auto changeset = pool.GetChangeSet();\n     changeset->StageRemoval(entry1);\n     changeset->StageRemoval(entry2);\n-    changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n+    \n     changeset->StageAddition(tx3, tx2_fee, 0, 1, 0, false, 4, LockPoints());\n     const auto res1 = ImprovesFeerateDiagram(*changeset);\n     BOOST_CHECK(res1.has_value());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.35.cpp\nindex 3f74dabd87..957cbcbd2e 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.35.cpp\n@@ -413,7 +413,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     BOOST_CHECK(res2.has_value());\n     BOOST_CHECK(res2.value().first == DiagramCheckError::FAILURE);\n     BOOST_CHECK(res2.value().second == \"insufficient feerate: does not improve feerate diagram\");\n-    changeset.reset();\n+    \n \n     pool.PrioritiseTransaction(entry1->GetSharedTx()->GetHash(), /*nFeeDelta=*/-1);\n \n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.34.cpp\nindex 3f74dabd87..8b87f858a6 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.34.cpp\n@@ -408,7 +408,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     changeset->StageRemoval(entry1);\n     changeset->StageRemoval(entry2);\n     changeset->StageAddition(tx1_conflict, tx1_fee+1, 0, 1, 0, false, 4, LockPoints());\n-    changeset->StageAddition(tx3, tx2_fee, 0, 1, 0, false, 4, LockPoints());\n+    \n     const auto res2 = ImprovesFeerateDiagram(*changeset);\n     BOOST_CHECK(res2.has_value());\n     BOOST_CHECK(res2.value().first == DiagramCheckError::FAILURE);\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.33.cpp\nindex 3f74dabd87..26437efd42 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.33.cpp\n@@ -407,7 +407,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     changeset = pool.GetChangeSet();\n     changeset->StageRemoval(entry1);\n     changeset->StageRemoval(entry2);\n-    changeset->StageAddition(tx1_conflict, tx1_fee+1, 0, 1, 0, false, 4, LockPoints());\n+    \n     changeset->StageAddition(tx3, tx2_fee, 0, 1, 0, false, 4, LockPoints());\n     const auto res2 = ImprovesFeerateDiagram(*changeset);\n     BOOST_CHECK(res2.has_value());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.29.cpp\nindex 3f74dabd87..48b51f11c1 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.29.cpp\n@@ -401,7 +401,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     changeset->StageAddition(tx3, tx2_fee, 0, 1, 0, false, 4, LockPoints());\n     BOOST_CHECK(ImprovesFeerateDiagram(*changeset) == std::nullopt);\n \n-    changeset.reset();\n+    \n     // With prioritisation of in-mempool conflicts, it affects the results of the comparison using the same args as just above\n     pool.PrioritiseTransaction(entry1->GetSharedTx()->GetHash(), /*nFeeDelta=*/1);\n     changeset = pool.GetChangeSet();\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.39.cpp\nindex 3f74dabd87..d1b730dfeb 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.39.cpp\n@@ -423,7 +423,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     auto entry4 = entry.FromTx(MakeTransactionRef(tx4));\n     changeset = pool.GetChangeSet();\n     changeset->StageRemoval(entry1);\n-    changeset->StageRemoval(entry2);\n+    \n     changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n     changeset->StageAddition(entry4.GetSharedTx(), tx2_fee, 0, 1, 0, false, 4, LockPoints());\n     BOOST_CHECK(ImprovesFeerateDiagram(*changeset) == std::nullopt);\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.38.cpp\nindex 3f74dabd87..73995a8c2b 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.38.cpp\n@@ -422,7 +422,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     tx4.vin[0].scriptWitness = CScriptWitness(); // Clear out the witness, to reduce size\n     auto entry4 = entry.FromTx(MakeTransactionRef(tx4));\n     changeset = pool.GetChangeSet();\n-    changeset->StageRemoval(entry1);\n+    \n     changeset->StageRemoval(entry2);\n     changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n     changeset->StageAddition(entry4.GetSharedTx(), tx2_fee, 0, 1, 0, false, 4, LockPoints());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.10.cpp\nindex 3f74dabd87..d827f7b0e2 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.10.cpp\n@@ -145,7 +145,7 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n \n     // Two independent high-feerate transactions, tx7 and tx8\n     const auto tx7 = make_tx(/*inputs=*/ {m_coinbase_txns[3]}, /*output_values=*/ {999 * CENT});\n-    AddToMempool(pool, entry.Fee(high_fee).FromTx(tx7));\n+    \n     const auto tx8 = make_tx(/*inputs=*/ {m_coinbase_txns[4]}, /*output_values=*/ {999 * CENT});\n     AddToMempool(pool, entry.Fee(high_fee).FromTx(tx8));\n \n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.48.cpp\nindex 3f74dabd87..282226310a 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.48.cpp\n@@ -438,7 +438,7 @@ BOOST_FIXTURE_TEST_CASE(improves_feerate, TestChain100Setup)\n     changeset->StageRemoval(entry1);\n     changeset->StageRemoval(entry2);\n     changeset->StageRemoval(entry5);\n-    changeset->StageAddition(tx1_conflict, tx1_fee, 0, 1, 0, false, 4, LockPoints());\n+    \n     changeset->StageAddition(entry4.GetSharedTx(), tx2_fee + entry5->GetModifiedFee() + 1, 0, 1, 0, false, 4, LockPoints());\n     const auto res3 = ImprovesFeerateDiagram(*changeset);\n     BOOST_CHECK(res3.has_value());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.88.cpp\nindex 3f74dabd87..ffc571bd23 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.88.cpp\n@@ -620,7 +620,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n         changeset->StageRemoval(conflict_2_entry);\n         changeset->StageRemoval(conflict_3_entry);\n         changeset->StageRemoval(conflict_1_child_entry);\n-        changeset->StageRemoval(conflict_1_grand_child_entry);\n+        \n         changeset->StageAddition(replacement_tx, high_fee, 0, 1, 0, false, 4, LockPoints());\n         const auto replace_cluster_size_3{changeset->CalculateChunksForRBF()};\n \n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.76.cpp\nindex 3f74dabd87..82cf837fa0 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.76.cpp\n@@ -583,7 +583,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n         changeset->StageRemoval(conflict_1_entry);\n         changeset->StageRemoval(conflict_2_entry);\n         changeset->StageRemoval(conflict_3_entry);\n-        changeset->StageAddition(replacement_tx, high_fee, 0, 1, 0, false, 4, LockPoints());\n+        \n         const auto replace_multiple_clusters{changeset->CalculateChunksForRBF()};\n         BOOST_CHECK(replace_multiple_clusters.has_value());\n         BOOST_CHECK(replace_multiple_clusters->first.size() == 3);\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.62.cpp\nindex 3f74dabd87..50cd31c960 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.62.cpp\n@@ -533,7 +533,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n     {\n         auto changeset = pool.GetChangeSet();\n         changeset->StageRemoval(entry_low);\n-        changeset->StageRemoval(entry_high);\n+        \n         changeset->StageRemoval(entry_normal);\n         changeset->StageAddition(replacement_tx, high_fee, 0, 1, 0, false, 4, LockPoints());\n         const auto replace_too_large{changeset->CalculateChunksForRBF()};\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.89.cpp\nindex 3f74dabd87..8a2f23da4c 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.89.cpp\n@@ -621,7 +621,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n         changeset->StageRemoval(conflict_3_entry);\n         changeset->StageRemoval(conflict_1_child_entry);\n         changeset->StageRemoval(conflict_1_grand_child_entry);\n-        changeset->StageAddition(replacement_tx, high_fee, 0, 1, 0, false, 4, LockPoints());\n+        \n         const auto replace_cluster_size_3{changeset->CalculateChunksForRBF()};\n \n         BOOST_CHECK(!replace_cluster_size_3.has_value());\n",
                "diff --git a/src/test/rbf_tests.cpp b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.66.cpp\nindex 3f74dabd87..f453de3dc1 100644\n--- a/src/test/rbf_tests.cpp\n+++ b/muts-pr-31122-rbf_tests-cpp/rbf_tests.mutant.66.cpp\n@@ -548,7 +548,7 @@ BOOST_FIXTURE_TEST_CASE(calc_feerate_diagram_rbf, TestChain100Setup)\n     const auto high_size_2 = entry_high_2->GetTxSize();\n \n     const auto low_tx_2 = make_tx(/*inputs=*/ {high_tx_2}, /*output_values=*/ {9 * COIN});\n-    AddToMempool(pool, entry.Fee(low_fee).FromTx(low_tx_2));\n+    \n     const auto entry_low_2 = pool.GetIter(low_tx_2->GetHash()).value();\n     const auto low_size_2 = entry_low_2->GetTxSize();\n \n"
            ]
        },
        {
            "filename": "src/txmempool.cpp",
            "mutation_score": 0.8,
            "head": "32ac5cd59b1fc4819de26ce52b439317149ca5de",
            "date": "24/10/2024 06:00:35",
            "diffs": [
                "diff --git a/src/txmempool.cpp b/./muts-txmempool-cpp/txmempool.mutant.2.cpp\nindex cca7c60737..0e8bfca95c 100644\n--- a/src/txmempool.cpp\n+++ b/./muts-txmempool-cpp/txmempool.mutant.2.cpp\n@@ -432,7 +432,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n void CTxMemPool::Apply(CTxMemPoolChangeSet* changeset)\n {\n     AssertLockHeld(cs);\n-    RemoveStaged(changeset->m_to_remove, false, MemPoolRemovalReason::REPLACED);\n+    RemoveStaged(changeset->m_to_remove, true, MemPoolRemovalReason::REPLACED);\n \n     for (size_t i=0; i<changeset->m_entry_vec.size(); ++i) {\n         auto tx_entry = changeset->m_entry_vec[i];\n"
            ]
        },
        {
            "filename": "src/validation.cpp",
            "head": "32ac5cd59b1fc4819de26ce52b439317149ca5de",
            "mutation_score": 0.5,
            "date": "24/10/2024 06:20:57",
            "diffs": [
                "diff --git a/src/validation.cpp b/./muts-validation-cpp/validation.mutant.2.cpp\nindex edce564786..75d68136fd 100644\n--- a/src/validation.cpp\n+++ b/./muts-validation-cpp/validation.mutant.2.cpp\n@@ -1386,7 +1386,7 @@ bool MemPoolAccept::SubmitPackage(const ATMPArgs& args, std::vector<Workspace>&\n         // mempool.\n         m_subpackage.m_changeset->Apply();\n         m_subpackage.m_changeset.reset();\n-        return false;\n+        return true;\n     }\n \n     std::vector<Wtxid> all_package_wtxids;\n",
                "diff --git a/src/validation.cpp b/./muts-validation-cpp/validation.mutant.1.cpp\nindex edce564786..0c15148df6 100644\n--- a/src/validation.cpp\n+++ b/./muts-validation-cpp/validation.mutant.1.cpp\n@@ -1311,7 +1311,7 @@ void MemPoolAccept::FinalizeSubpackage(const ATMPArgs& args)\n                                       it->GetTxSize());\n         FeeFrac feerate{m_subpackage.m_total_modified_fees, int32_t(m_subpackage.m_total_vsize)};\n         uint256 tx_or_package_hash{};\n-        if (m_subpackage.m_changeset->GetTxCount() == 1) {\n+        if (m_subpackage.m_changeset->GetTxCount() != 1) {\n             const CTransaction& tx = m_subpackage.m_changeset->GetTx(0);\n             tx_or_package_hash = tx.GetHash();\n             log_string += strprintf(\"New tx %s (wtxid=%s, fees=%s, vsize=%s)\",\n"
            ]
        },
        {
            "filename": "src/txmempool.h",
            "head": "32ac5cd59b1fc4819de26ce52b439317149ca5de",
            "mutation_score": 0.0,
            "date": "24/10/2024 06:32:15",
            "diffs": [
                "diff --git a/src/txmempool.h b/./muts-txmempool-h/txmempool.mutant.0.h\nindex d206da57c5..3354946013 100644\n--- a/src/txmempool.h\n+++ b/./muts-txmempool-h/txmempool.mutant.0.h\n@@ -808,7 +808,7 @@ public:\n             LOCK(m_pool->cs);\n             auto ret = m_pool->CalculateMemPoolAncestors(*tx, limits);\n             if (ret) m_ancestors.insert({tx, *ret});\n-            else m_ancestors.erase(tx);\n+            \n             return ret;\n         }\n \n"
            ]
        }
    ]
}