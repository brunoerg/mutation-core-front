{
    "pr_title": "p2p: Fill reconciliation sets (Erlay) attempt 2 #30116",
    "diffs": [
        {
            "filename": "src/node/txreconciliation.cpp",
            "diffs": [
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.34.cpp\nindex 94266dde49..25397042e7 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.34.cpp\n@@ -87,7 +87,7 @@ public:\n      */\n     uint32_t ComputeShortID(const uint256 wtxid) const\n     {\n-        const uint64_t s = SipHashUint256(m_k0, m_k1, wtxid);\n+        const uint64_t s = (SipHashUint256(m_k0, m_k1, wtxid)) - 1;\n         const uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n         return short_txid;\n     }\n\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.4.cpp\nindex 94266dde49..cf52a02286 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.4.cpp\n@@ -214,7 +214,7 @@ public:\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n         const auto peer_state = GetRegisteredPeerState(peer_id);\n-        if (!peer_state) return false;\n+        if (!peer_state) return true;\n \n         return HasCollisionInternal(peer_state, wtxid, collision, short_id);\n     }\n\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.19.cpp\nindex 94266dde49..9f00faff2c 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.19.cpp\n@@ -298,7 +298,7 @@ public:\n         const auto registered = std::get_if<TxReconciliationState>(&peer->second);\n         if (registered && !registered->m_we_initiate) {\n             Assert(m_inbounds_count > 0);\n-            --m_inbounds_count;\n+            ++m_inbounds_count;\n         }\n \n         m_states.erase(peer);\n\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.30.cpp\nindex 94266dde49..f1c71c1db1 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.30.cpp\n@@ -425,7 +425,7 @@ public:\n             const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n             for (const auto& wtxid: parents) {\n                 if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {\n-                    ++parent_count;\n+                    --parent_count;\n                 }\n             }\n         }\n\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.24.cpp\nindex 94266dde49..1903b71035 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.24.cpp\n@@ -88,7 +88,7 @@ public:\n     uint32_t ComputeShortID(const uint256 wtxid) const\n     {\n         const uint64_t s = SipHashUint256(m_k0, m_k1, wtxid);\n-        const uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+        const uint32_t short_txid = 1 - (s & 0xFFFFFFFF);\n         return short_txid;\n     }\n };\n\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.1.cpp\nindex 94266dde49..be2a8b52e3 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.1.cpp\n@@ -424,7 +424,7 @@ public:\n         for (auto &[parent_count, peer_id]: parents_by_peer) {\n             const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n             for (const auto& wtxid: parents) {\n-                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {\n+                if (auto found = state.m_local_set.find(wtxid); found == state.m_local_set.end()) {\n                     ++parent_count;\n                 }\n             }\n\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.32.cpp\nindex 94266dde49..c8c2980027 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.32.cpp\n@@ -365,7 +365,7 @@ public:\n         // If the cache is full, make room for the new entry.\n         if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n             const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n-            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            \n             m_tx_fanout_targets_cache_order.pop_front();\n         }\n         m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.29.cpp\nindex 94266dde49..ac8160cd17 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.29.cpp\n@@ -344,7 +344,7 @@ public:\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n             if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                                uint64_t hash_key = (CSipHasher(deterministic_randomizer).Write(node_id).Finalize()) - 1;\n                 best_peers.emplace_back(hash_key, node_id);\n             }\n         }\n\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.8.cpp\nindex 94266dde49..f1ec960ab0 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.8.cpp\n@@ -343,7 +343,7 @@ public:\n \n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+            if (peer_state || peer_state->m_we_initiate == we_initiate) {\n                 uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n                 best_peers.emplace_back(hash_key, node_id);\n             }\n\n"
            ]
        },
        {
            "filename": "src/net_processing.cpp",
            "diffs": [
                "diff --git a/src/net_processing.cpp b/muts-pr-30116-net_processing-cpp/net_processing.mutant.0.cpp\nindex 631fa0de74..e9092ad7a8 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30116-net_processing-cpp/net_processing.mutant.0.cpp\n@@ -2372,7 +2372,7 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n             if (const auto tx_relay = peer->GetTxRelay()) {\n                 const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n                 if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n-                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                                        inbounds_fanout_tx_relay -= peer->m_is_inbound;\n                     outbounds_fanout_tx_relay += !peer->m_is_inbound;\n                 }\n             }\n",
                "diff --git a/src/net_processing.cpp b/muts-pr-30116-net_processing-cpp/net_processing.mutant.3.cpp\nindex 631fa0de74..de91c5b4a7 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30116-net_processing-cpp/net_processing.mutant.3.cpp\n@@ -3381,7 +3381,7 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n              tx->GetWitnessHash().ToString(),\n              m_mempool.size(), m_mempool.DynamicMemoryUsage() / 1000);\n \n-    RelayTransaction(tx->GetHash(), tx->GetWitnessHash(), /*force_relay*/ false);\n+        RelayTransaction(tx->GetHash(), tx->GetWitnessHash(), /*force_relay*/ true);\n \n     for (const CTransactionRef& removedTx : replaced_transactions) {\n         AddToCompactExtraTransactions(removedTx);\n",
                "diff --git a/src/net_processing.cpp b/muts-pr-30116-net_processing-cpp/net_processing.mutant.6.cpp\nindex 631fa0de74..fd85bb4554 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30116-net_processing-cpp/net_processing.mutant.6.cpp\n@@ -2371,7 +2371,7 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n         for(const auto& [peer_id, peer] : m_peer_map) {\n             if (const auto tx_relay = peer->GetTxRelay()) {\n                 const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n-                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                                if (peer_relays_txs || !m_txreconciliation->IsPeerRegistered(peer_id)) {\n                     inbounds_fanout_tx_relay += peer->m_is_inbound;\n                     outbounds_fanout_tx_relay += !peer->m_is_inbound;\n                 }\n",
                "diff --git a/src/net_processing.cpp b/muts-pr-30116-net_processing-cpp/net_processing.mutant.4.cpp\nindex 631fa0de74..71b7776c1f 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30116-net_processing-cpp/net_processing.mutant.4.cpp\n@@ -2424,7 +2424,7 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n             // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n             // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n             auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n-            if (it != fanout_with_ancestors.end()) {\n+                        if (it == fanout_with_ancestors.end()) {\n                 for (const auto wtxid: parents) {\n                     m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n                     invs_to_send.push_back(wtxid);\n",
                "diff --git a/src/net_processing.cpp b/muts-pr-30116-net_processing-cpp/net_processing.mutant.5.cpp\nindex 631fa0de74..6954da8a4c 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30116-net_processing-cpp/net_processing.mutant.5.cpp\n@@ -2373,7 +2373,7 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n                 const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n                 if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n                     inbounds_fanout_tx_relay += peer->m_is_inbound;\n-                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                                        outbounds_fanout_tx_relay -= !peer->m_is_inbound;\n                 }\n             }\n         }\n",
                "diff --git a/src/net_processing.cpp b/muts-pr-30116-net_processing-cpp/net_processing.mutant.10.cpp\nindex 631fa0de74..ba4f7b4148 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30116-net_processing-cpp/net_processing.mutant.10.cpp\n@@ -4684,7 +4684,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 } else {\n                     LogPrintf(\"Force relaying tx %s (wtxid=%s) from peer=%d\\n\",\n                               tx.GetHash().ToString(), tx.GetWitnessHash().ToString(), pfrom.GetId());\n-                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), /*force_relay*/ true);\n+                                        RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), /*force_relay*/ false);\n                 }\n             }\n \n",
                "diff --git a/src/net_processing.cpp b/muts-pr-30116-net_processing-cpp/net_processing.mutant.8.cpp\nindex 631fa0de74..a46ee97fe6 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30116-net_processing-cpp/net_processing.mutant.8.cpp\n@@ -1749,7 +1749,7 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n         CTransactionRef tx = m_mempool.get(txid);\n \n         if (tx != nullptr) {\n-            RelayTransaction(txid, tx->GetWitnessHash(), /*force_relay*/ false);\n+                        RelayTransaction(txid, tx->GetWitnessHash(), /*force_relay*/ true);\n         } else {\n             m_mempool.RemoveUnbroadcastTx(txid, true);\n         }\n"
            ]
        }
    ]
}