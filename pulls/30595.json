{
    "pr_title": "kernel: Introduce initial C header API #30595",
    "head": "e70e527ef215197cac56b3f6e065abd891724c13",
    "diffs": [
        {
            "filename": "src/test/kernel/test_kernel.cpp",
            "head": "e70e527ef215197cac56b3f6e065abd891724c13",
            "mutation_score": 0.86,
            "diffs": [
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.56.cpp\nindex 525b363261..e495a37363 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.56.cpp\n@@ -482,7 +482,7 @@ void chainman_mainnet_validation_test(TestDirectory& test_directory)\n \n     // Check that we can read the previous block\n     auto tip_2{tip.GetPreviousBlockIndex()};\n-    auto read_block_2{chainman->ReadBlock(tip_2.value())};\n+    \n \n     // It should be an error if we go another block back, since the genesis has no ancestor\n     assert(!tip_2.value().GetPreviousBlockIndex().has_value());\n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.80.cpp\nindex 525b363261..8b41de1ab6 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.80.cpp\n@@ -584,7 +584,7 @@ void chainman_reindex_chainstate_test(TestDirectory& test_directory)\n \n     std::vector<std::string> import_files;\n     import_files.push_back(test_directory.m_directory / \"blocks\" / \"blk00000.dat\");\n-    chainman->ImportBlocks(import_files);\n+    \n }\n \n int main()\n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.43.cpp\nindex 525b363261..1a949c2de6 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.43.cpp\n@@ -409,7 +409,7 @@ std::unique_ptr<ChainMan> create_chainman(TestDirectory& test_directory,\n         chainstate_load_opts.SetWipeChainstateDb(reindex);\n     }\n     if (wipe_chainstate) {\n-        chainstate_load_opts.SetWipeChainstateDb(wipe_chainstate);\n+        \n     }\n     if (block_tree_db_in_memory) {\n         chainstate_load_opts.SetBlockTreeDbInMemory(block_tree_db_in_memory);\n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.41.cpp\nindex 525b363261..c2b5b7a8dc 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.41.cpp\n@@ -405,7 +405,7 @@ std::unique_ptr<ChainMan> create_chainman(TestDirectory& test_directory,\n \n     ChainstateLoadOptions chainstate_load_opts{};\n     if (reindex) {\n-        chainstate_load_opts.SetWipeBlockTreeDb(reindex);\n+        \n         chainstate_load_opts.SetWipeChainstateDb(reindex);\n     }\n     if (wipe_chainstate) {\n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.52.cpp\nindex 525b363261..27dc92efdb 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.52.cpp\n@@ -470,7 +470,7 @@ void chainman_mainnet_validation_test(TestDirectory& test_directory)\n     auto raw_block = hex_string_to_char_vec(\"010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e362990101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0104ffffffff0100f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac00000000\");\n     Block block{raw_block};\n     assert(block);\n-    validation_interface.m_expected_valid_block.emplace(raw_block);\n+    \n     assert(block.GetBlockData() == raw_block);\n     auto status{kernel_ProcessBlockStatus::kernel_PROCESS_BLOCK_OK};\n     assert(chainman->ProcessBlock(block, status));\n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.48.cpp\nindex 525b363261..e96a18eec3 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.48.cpp\n@@ -434,7 +434,7 @@ void chainman_in_memory_test()\n         Block block{raw_block};\n         assert(block);\n         auto status{kernel_ProcessBlockStatus::kernel_PROCESS_BLOCK_OK};\n-        chainman->ProcessBlock(block, status);\n+        \n         assert(status == kernel_PROCESS_BLOCK_OK);\n     }\n \n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.14.cpp\nindex 525b363261..1d41266d9d 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.14.cpp\n@@ -69,7 +69,7 @@ struct TestDirectory {\n \n     ~TestDirectory()\n     {\n-        std::filesystem::remove_all(m_directory);\n+        \n     }\n };\n \n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.12.cpp\nindex 525b363261..cea6f6dcce 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.12.cpp\n@@ -64,7 +64,7 @@ struct TestDirectory {\n     TestDirectory(std::string directory_name)\n         : m_directory{std::filesystem::temp_directory_path() / (directory_name + random_string(16))}\n     {\n-        std::filesystem::create_directories(m_directory);\n+        \n     }\n \n     ~TestDirectory()\n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.3.cpp\nindex 525b363261..17cc0a753e 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.3.cpp\n@@ -32,7 +32,7 @@ std::string random_string(uint32_t length)\n     std::string random;\n     random.reserve(length);\n     for (uint32_t i = 0; i < length; i++) {\n-        random += chars[distribution(dre)];\n+        \n     }\n     return random;\n }\n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.1.cpp\nindex 525b363261..cd4588237f 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.1.cpp\n@@ -30,7 +30,7 @@ std::string random_string(uint32_t length)\n     static std::uniform_int_distribution<> distribution(0, chars.size() - 1);\n \n     std::string random;\n-    random.reserve(length);\n+    \n     for (uint32_t i = 0; i < length; i++) {\n         random += chars[distribution(dre)];\n     }\n",
                "diff --git a/src/test/kernel/test_kernel.cpp b/muts/test_kernel.mutant.38.cpp\nindex 525b363261..41fc834ee8 100644\n--- a/src/test/kernel/test_kernel.cpp\n+++ b/muts/test_kernel.mutant.38.cpp\n@@ -346,7 +346,7 @@ void context_test()\n         TestKernelNotifications notifications{};\n         ContextOptions options{};\n         ChainParams params{kernel_ChainType::kernel_CHAIN_TYPE_MAINNET};\n-        options.SetChainParams(params);\n+        \n         options.SetNotifications(notifications);\n         Context context{options};\n         assert(context);\n"
            ]
        }
    ]
}