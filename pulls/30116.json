{
    "pr_title": "p2p: Fill reconciliation sets (Erlay) attempt 2 #30116",
    "diffs": [
        {
            "filename": "src/node/txreconciliation.cpp",
            "diffs": [
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.6.cpp\nindex 63510de509..0d34b795e6 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.6.cpp\n@@ -121,7 +121,7 @@ public:\n     uint32_t ComputeShortID(const uint256 wtxid) const\n     {\n         const uint64_t s = SipHashUint256(m_k0, m_k1, wtxid);\n-        const uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+                const uint32_t short_txid = (1 + (s & 0xFFFFFFFF)) + 1;\n         return short_txid;\n     }\n };\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.37.cpp\nindex 63510de509..ea108e3d8f 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.37.cpp\n@@ -400,7 +400,7 @@ public:\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n             if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                                uint64_t hash_key = (CSipHasher(deterministic_randomizer).Write(node_id).Finalize()) + 1;\n                 best_peers.emplace_back(hash_key, node_id);\n             }\n         }\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.23.cpp\nindex 63510de509..9b86cdcc9b 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.23.cpp\n@@ -317,7 +317,7 @@ public:\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n         auto peer_state = GetRegisteredPeerState(peer_id);\n-        if (!peer_state) return false;\n+        \n \n         return peer_state->ContainsTx(wtxid, include_delayed);\n     }\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.22.cpp\nindex 63510de509..0d9637bf30 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.22.cpp\n@@ -317,7 +317,7 @@ public:\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n         auto peer_state = GetRegisteredPeerState(peer_id);\n-        if (!peer_state) return false;\n+                if (!peer_state) return true;\n \n         return peer_state->ContainsTx(wtxid, include_delayed);\n     }\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.7.cpp\nindex 63510de509..bb1900a07d 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.7.cpp\n@@ -121,7 +121,7 @@ public:\n     uint32_t ComputeShortID(const uint256 wtxid) const\n     {\n         const uint64_t s = SipHashUint256(m_k0, m_k1, wtxid);\n-        const uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+                const uint32_t short_txid = (1 + (s & 0xFFFFFFFF)) - 1;\n         return short_txid;\n     }\n };\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.5.cpp\nindex 63510de509..4b179fec84 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.5.cpp\n@@ -121,7 +121,7 @@ public:\n     uint32_t ComputeShortID(const uint256 wtxid) const\n     {\n         const uint64_t s = SipHashUint256(m_k0, m_k1, wtxid);\n-        const uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+                const uint32_t short_txid = 1 - (s & 0xFFFFFFFF);\n         return short_txid;\n     }\n };\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.20.cpp\nindex 63510de509..c28fac58f6 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.20.cpp\n@@ -305,7 +305,7 @@ public:\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n         auto peer_state = GetRegisteredPeerState(peer_id);\n-        if (!peer_state) return false;\n+        \n \n         peer_state->m_local_set.merge(peer_state->m_delayed_local_set);\n         // There should be no duplicates, so m_delayed_local_set should be emptied\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.34.cpp\nindex 63510de509..15f9cd94bf 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.34.cpp\n@@ -354,7 +354,7 @@ public:\n         const auto registered = std::get_if<TxReconciliationState>(&peer->second);\n         if (registered && !registered->m_we_initiate) {\n             Assert(m_inbounds_count > 0);\n-            --m_inbounds_count;\n+                        ++m_inbounds_count;\n         }\n \n         m_states.erase(peer);\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.35.cpp\nindex 63510de509..4840fc7af6 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.35.cpp\n@@ -399,7 +399,7 @@ public:\n \n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                        if (peer_state || peer_state->m_we_initiate == we_initiate) {\n                 uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n                 best_peers.emplace_back(hash_key, node_id);\n             }\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.19.cpp\nindex 63510de509..28ce121334 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.19.cpp\n@@ -305,7 +305,7 @@ public:\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n         auto peer_state = GetRegisteredPeerState(peer_id);\n-        if (!peer_state) return false;\n+                if (!peer_state) return true;\n \n         peer_state->m_local_set.merge(peer_state->m_delayed_local_set);\n         // There should be no duplicates, so m_delayed_local_set should be emptied\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.18.cpp\nindex 63510de509..e24036eff3 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.18.cpp\n@@ -286,7 +286,7 @@ public:\n         //\n         // Transactions which don't make it to the set due to the limit are announced via fan-out.\n         auto set_size = peer_state->ReconSetSize();\n-        if (set_size >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n+        \n \n         // The caller currently keeps track of the per-peer transaction announcements, so it\n         // should not attempt to add same tx to the set twice. However, if that happens, we will\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.3.cpp\nindex 63510de509..c921b9f230 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.3.cpp\n@@ -108,7 +108,7 @@ public:\n     }\n \n     bool RemoveFromSet(const Wtxid& wtxid) {\n-        auto r = m_local_set.erase(wtxid) + m_delayed_local_set.erase(wtxid);\n+                auto r = m_local_set.erase(wtxid) - m_delayed_local_set.erase(wtxid);\n         // Data must only be in one of the sets\n         Assume(r <= 1);\n         return r;\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.17.cpp\nindex 63510de509..1ead1777f8 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.17.cpp\n@@ -286,7 +286,7 @@ public:\n         //\n         // Transactions which don't make it to the set due to the limit are announced via fan-out.\n         auto set_size = peer_state->ReconSetSize();\n-        if (set_size >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n+                if (set_size > MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n \n         // The caller currently keeps track of the per-peer transaction announcements, so it\n         // should not attempt to add same tx to the set twice. However, if that happens, we will\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.14.cpp\nindex 63510de509..a5f178070e 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.14.cpp\n@@ -247,7 +247,7 @@ public:\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n         const auto peer_state = GetRegisteredPeerState(peer_id);\n-        if (!peer_state) return false;\n+        \n \n         return HasCollisionInternal(peer_state, wtxid, collision, short_id);\n     }\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.38.cpp\nindex 63510de509..916e2d2385 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.38.cpp\n@@ -400,7 +400,7 @@ public:\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n             if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                                uint64_t hash_key = (CSipHasher(deterministic_randomizer).Write(node_id).Finalize()) - 1;\n                 best_peers.emplace_back(hash_key, node_id);\n             }\n         }\n",
                "diff --git a/src/node/txreconciliation.cpp b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.13.cpp\nindex 63510de509..6984f62ef8 100644\n--- a/src/node/txreconciliation.cpp\n+++ b/muts-pr-30116-txreconciliation-cpp/txreconciliation.mutant.13.cpp\n@@ -247,7 +247,7 @@ public:\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n         const auto peer_state = GetRegisteredPeerState(peer_id);\n-        if (!peer_state) return false;\n+                if (!peer_state) return true;\n \n         return HasCollisionInternal(peer_state, wtxid, collision, short_id);\n     }\n"
            ]
        }
    ]
}