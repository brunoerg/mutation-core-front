{
    "pr_title": "net: option to disallow v1 connection on ipv4 and ipv6 peers #30951",
    "head": "ab5f8759ab4161a6c303f879d1bf7360dbb2f905",
    "diffs": [
        {
            "filename": "src/init.cpp",
            "head": "ab5f8759ab4161a6c303f879d1bf7360dbb2f905",
            "mutation_score": 0.33,
            "generated_at": "2024-04-10 01:00:00",
            "diffs": [
                "diff --git a/src/init.cpp b/muts-pr-30951-init-cpp/init.mutant.2.cpp\nindex 70628819ca..c8779df68e 100644\n--- a/src/init.cpp\n+++ b/muts-pr-30951-init-cpp/init.mutant.2.cpp\n@@ -958,7 +958,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     // Signal NODE_P2P_V2 if BIP324 v2 transport is enabled.\n     if (args.GetBoolArg(\"-v2transport\", DEFAULT_V2_TRANSPORT)) {\n         nLocalServices = ServiceFlags(nLocalServices | NODE_P2P_V2);\n-        if (args.GetBoolArg(\"-v2onlyclearnet\", false)) {\n+                if (args.GetBoolArg(\"-v2onlyclearnet\", true)) {\n             disable_v1conn_clearnet = true;\n         }\n     } else if (args.GetBoolArg(\"-v2onlyclearnet\", false)) {\n",
                "diff --git a/src/init.cpp b/muts-pr-30951-init-cpp/init.mutant.1.cpp\nindex 70628819ca..02805a1265 100644\n--- a/src/init.cpp\n+++ b/muts-pr-30951-init-cpp/init.mutant.1.cpp\n@@ -844,7 +844,7 @@ int available_fds;\n ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\n int64_t peer_connect_timeout;\n std::set<BlockFilterType> g_enabled_filter_types;\n-bool disable_v1conn_clearnet = false;\n+bool disable_v1conn_clearnet = true;\n \n } // namespace\n \n",
                "diff --git a/src/init.cpp b/muts-pr-30951-init-cpp/init.mutant.0.cpp\nindex 70628819ca..4dc6c0dc0e 100644\n--- a/src/init.cpp\n+++ b/muts-pr-30951-init-cpp/init.mutant.0.cpp\n@@ -550,7 +550,7 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n     argsman.AddArg(\"-i2pacceptincoming\", strprintf(\"Whether to accept inbound I2P connections (default: %i). Ignored if -i2psam is not set. Listening for inbound I2P connections is done through the SAM proxy, not by binding to a local address and port.\", DEFAULT_I2P_ACCEPT_INCOMING), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make automatic outbound connections only to network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Inbound and manual connections are not affected by this option. It can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-v2transport\", strprintf(\"Support v2 transport (default: %u)\", DEFAULT_V2_TRANSPORT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-v2onlyclearnet\", strprintf(\"Disallow v1 connections on IPV4/IPV6 (default: %u). Enabling this is not recommended unless absolutely necessary, as it may risk network partitions if all users enable it.\", false), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        argsman.AddArg(\"-v2onlyclearnet\", strprintf(\"Disallow v1 connections on IPV4/IPV6 (default: %u). Enabling this is not recommended unless absolutely necessary, as it may risk network partitions if all users enable it.\", true), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-txreconciliation\", strprintf(\"Enable transaction reconciliations per BIP 330 (default: %d)\", DEFAULT_TXRECONCILIATION_ENABLE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n",
                "diff --git a/src/init.cpp b/muts-pr-30951-init-cpp/init.mutant.5.cpp\nindex 70628819ca..f9caaba37e 100644\n--- a/src/init.cpp\n+++ b/muts-pr-30951-init-cpp/init.mutant.5.cpp\n@@ -962,7 +962,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n             disable_v1conn_clearnet = true;\n         }\n     } else if (args.GetBoolArg(\"-v2onlyclearnet\", false)) {\n-            return InitError(_(\"Cannot set -v2onlyclearnet to true when v2transport is disabled.\"));\n+                        return InitError(_(\"Cannot set -v2onlyclearnet to false when v2transport is disabled.\"));\n     }\n \n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n"
            ]
        },
        {
            "filename": "src/net.cpp",
            "head": "ab5f8759ab4161a6c303f879d1bf7360dbb2f905",
            "mutation_score": 0.40,
            "generated_at": "2024-04-10 01:00:00",
            "diffs": [
                "diff --git a/src/net.cpp b/muts-pr-30951-net-cpp/net.mutant.8.cpp\nindex 8a0da051b4..c94ec69f79 100644\n--- a/src/net.cpp\n+++ b/muts-pr-30951-net-cpp/net.mutant.8.cpp\n@@ -2961,7 +2961,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         if (LookupHost(host, false).has_value()) {\n             netclass = LookupHost(host, false).value().GetNetClass();\n         } else if (LookupHost(host, true).has_value()) {\n-            netclass = LookupHost(host, true).value().GetNetClass();\n+                        netclass = LookupHost(host, false).value().GetNetClass();\n         } else {\n             netclass = NET_UNROUTABLE;\n         }\n",
                "diff --git a/src/net.cpp b/muts-pr-30951-net-cpp/net.mutant.3.cpp\nindex 8a0da051b4..483954ea05 100644\n--- a/src/net.cpp\n+++ b/muts-pr-30951-net-cpp/net.mutant.3.cpp\n@@ -2767,7 +2767,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n             }\n \n             bool use_v2transport(addr.nServices & GetLocalServices() & NODE_P2P_V2);\n-            if (DisableV1OnClearnet(addr.GetNetClass()) && !use_v2transport) {\n+                        if (DisableV1OnClearnet(addr.GetNetClass()) || !use_v2transport) {\n                 continue;\n             }\n \n",
                "diff --git a/src/net.cpp b/muts-pr-30951-net-cpp/net.mutant.5.cpp\nindex 8a0da051b4..42dfd022b3 100644\n--- a/src/net.cpp\n+++ b/muts-pr-30951-net-cpp/net.mutant.5.cpp\n@@ -2958,7 +2958,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         std::string host;\n         uint16_t port;\n         SplitHostPort(std::string(pszDest), port, host);\n-        if (LookupHost(host, false).has_value()) {\n+                if (LookupHost(host, true).has_value()) {\n             netclass = LookupHost(host, false).value().GetNetClass();\n         } else if (LookupHost(host, true).has_value()) {\n             netclass = LookupHost(host, true).value().GetNetClass();\n",
                "diff --git a/src/net.cpp b/muts-pr-30951-net-cpp/net.mutant.4.cpp\nindex 8a0da051b4..b95f189803 100644\n--- a/src/net.cpp\n+++ b/muts-pr-30951-net-cpp/net.mutant.4.cpp\n@@ -2768,7 +2768,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n \n             bool use_v2transport(addr.nServices & GetLocalServices() & NODE_P2P_V2);\n             if (DisableV1OnClearnet(addr.GetNetClass()) && !use_v2transport) {\n-                continue;\n+                                break;\n             }\n \n             // only consider very recently tried nodes after 30 failed attempts\n",
                "diff --git a/src/net.cpp b/muts-pr-30951-net-cpp/net.mutant.6.cpp\nindex 8a0da051b4..9e0d8799e2 100644\n--- a/src/net.cpp\n+++ b/muts-pr-30951-net-cpp/net.mutant.6.cpp\n@@ -2959,7 +2959,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         uint16_t port;\n         SplitHostPort(std::string(pszDest), port, host);\n         if (LookupHost(host, false).has_value()) {\n-            netclass = LookupHost(host, false).value().GetNetClass();\n+                        netclass = LookupHost(host, true).value().GetNetClass();\n         } else if (LookupHost(host, true).has_value()) {\n             netclass = LookupHost(host, true).value().GetNetClass();\n         } else {\n",
                "diff --git a/src/net.cpp b/muts-pr-30951-net-cpp/net.mutant.7.cpp\nindex 8a0da051b4..640a96e655 100644\n--- a/src/net.cpp\n+++ b/muts-pr-30951-net-cpp/net.mutant.7.cpp\n@@ -2960,7 +2960,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         SplitHostPort(std::string(pszDest), port, host);\n         if (LookupHost(host, false).has_value()) {\n             netclass = LookupHost(host, false).value().GetNetClass();\n-        } else if (LookupHost(host, true).has_value()) {\n+                } else if (LookupHost(host, false).has_value()) {\n             netclass = LookupHost(host, true).value().GetNetClass();\n         } else {\n             netclass = NET_UNROUTABLE;\n"
            ]
        },
        {
            "filename": "src/net_processing.cpp",
            "head": "ab5f8759ab4161a6c303f879d1bf7360dbb2f905",
            "mutation_score": 0.33,
            "generated_at": "2024-04-10 01:00:00",
            "diffs": [
                "diff --git a/src/net_processing.cpp b/muts-pr-30951-net_processing-cpp/net_processing.mutant.0.cpp\nindex b296f9514c..1ff53e6e39 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30951-net_processing-cpp/net_processing.mutant.0.cpp\n@@ -3784,7 +3784,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        const bool is_v1transport = pfrom.m_transport->GetInfo().transport_type == TransportProtocolType::V1;\n+                const bool is_v1transport = pfrom.m_transport->GetInfo().transport_type != TransportProtocolType::V1;\n         if (pfrom.IsInboundConn() && is_v1transport && m_connman.DisableV1OnClearnet(pfrom.ConnectedThroughNetwork())){\n             pfrom.fDisconnect = true;\n             return;\n",
                "diff --git a/src/net_processing.cpp b/muts-pr-30951-net_processing-cpp/net_processing.mutant.2.cpp\nindex b296f9514c..061b1e3a71 100644\n--- a/src/net_processing.cpp\n+++ b/muts-pr-30951-net_processing-cpp/net_processing.mutant.2.cpp\n@@ -3786,7 +3786,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         const bool is_v1transport = pfrom.m_transport->GetInfo().transport_type == TransportProtocolType::V1;\n         if (pfrom.IsInboundConn() && is_v1transport && m_connman.DisableV1OnClearnet(pfrom.ConnectedThroughNetwork())){\n-            pfrom.fDisconnect = true;\n+                        pfrom.fDisconnect = false;\n             return;\n         }\n \n"
            ]
        }
    ]
}