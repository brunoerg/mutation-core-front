{
    "pr_title": "Broadcast own transactions only via short-lived Tor or I2P connections #29415",
    "head": "f9b2eaf96cf32dae53a0c00a30fe32f38dc9def6",
    "diffs": [
        {
            "filename": "src/net.cpp",
            "head": "f9b2eaf96cf32dae53a0c00a30fe32f38dc9def6",
            "mutation_score": 0.41,
            "generated_at": "2024-04-10 01:00:00",
            "diffs": [
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.11.cpp\nindex d0edb8b7d6..683c93d57d 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.11.cpp\n@@ -2620,7 +2620,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n             // we fallback on to fixed seeds: -dnsseed, -seednode, -addnode\n             // If none of those are available, we fallback on to fixed seeds immediately, else we allow\n             // 60 seconds for any of those sources to populate addrman.\n-            bool add_fixed_seeds_now = false;\n+                        bool add_fixed_seeds_now = true;\n             // It is cheapest to check if enough time has passed first.\n             if (GetTime<std::chrono::seconds>() > start + std::chrono::minutes{1}) {\n                 add_fixed_seeds_now = true;\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.38.cpp\nindex d0edb8b7d6..753ed1c435 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.38.cpp\n@@ -3113,7 +3113,7 @@ size_t CConnman::PrivateBroadcast::NumToOpenSub(size_t n)\n     size_t before{m_num_to_open.load()};\n     size_t desired;\n     do {\n-        desired = before > n ? before - n : 0;\n+                desired = before >= n ? before - n : 0;\n     } while (!m_num_to_open.compare_exchange_weak(before, desired));\n \n     LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.10.cpp\nindex d0edb8b7d6..7d888b018c 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.10.cpp\n@@ -2615,7 +2615,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n             return;\n \n         const std::unordered_set<Network> fixed_seed_networks{GetReachableEmptyNetworks()};\n-        if (add_fixed_seeds && !fixed_seed_networks.empty()) {\n+                if (add_fixed_seeds || !fixed_seed_networks.empty()) {\n             // When the node starts with an empty peers.dat, there are a few other sources of peers before\n             // we fallback on to fixed seeds: -dnsseed, -seednode, -addnode\n             // If none of those are available, we fallback on to fixed seeds immediately, else we allow\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.13.cpp\nindex d0edb8b7d6..daa3df131c 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.13.cpp\n@@ -2622,7 +2622,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n             // 60 seconds for any of those sources to populate addrman.\n             bool add_fixed_seeds_now = false;\n             // It is cheapest to check if enough time has passed first.\n-            if (GetTime<std::chrono::seconds>() > start + std::chrono::minutes{1}) {\n+                        if (GetTime<std::chrono::seconds>() >= start + std::chrono::minutes{1}) {\n                 add_fixed_seeds_now = true;\n                 LogPrintf(\"Adding fixed seeds as 60 seconds have passed and addrman is empty for at least one reachable network\\n\");\n             }\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.8.cpp\nindex d0edb8b7d6..36e1d13cec 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.8.cpp\n@@ -2599,7 +2599,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n             }\n         }\n \n-        CSemaphoreGrant grant{*semOutbound, /*fTry=*/true};\n+                CSemaphoreGrant grant{*semOutbound, /*fTry=*/false};\n         if (open_private_broadcast_to.has_value() && grant) {\n             // Previous connection was private broadcast, thus yield to other connection types\n             // if we are ready to do so (the outbound semaphore gave green light).\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.17.cpp\nindex d0edb8b7d6..ae2a7cd9eb 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.17.cpp\n@@ -2628,7 +2628,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n             }\n \n             // Perform cheap checks before locking a mutex.\n-            else if (!dnsseed && !use_seednodes) {\n+                        else if (!dnsseed || !use_seednodes) {\n                 LOCK(m_added_nodes_mutex);\n                 if (m_added_node_params.empty()) {\n                     add_fixed_seeds_now = true;\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.16.cpp\nindex d0edb8b7d6..08732be9c1 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.16.cpp\n@@ -2623,7 +2623,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n             bool add_fixed_seeds_now = false;\n             // It is cheapest to check if enough time has passed first.\n             if (GetTime<std::chrono::seconds>() > start + std::chrono::minutes{1}) {\n-                add_fixed_seeds_now = true;\n+                                add_fixed_seeds_now = false;\n                 LogPrintf(\"Adding fixed seeds as 60 seconds have passed and addrman is empty for at least one reachable network\\n\");\n             }\n \n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.28.cpp\nindex d0edb8b7d6..815345dcf8 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.28.cpp\n@@ -2994,7 +2994,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return;\n     pnode->grantOutbound = std::move(grant_outbound);\n \n-    if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\n+        if (conn_type != ConnectionType::PRIVATE_BROADCAST) {\n         const size_t before_sub{m_private_broadcast.NumToOpenSub(1)};\n         Assume(before_sub > 0);\n         LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.29.cpp\nindex d0edb8b7d6..a4f220e98b 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.29.cpp\n@@ -3002,7 +3002,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n                       \"Connected to %s, decremented the number of required connections from %d to %d\\n\",\n                       addrConnect.ToStringAddrPort(),\n                       before_sub,\n-                      before_sub - 1);\n+                                            before_sub + 1);\n     }\n \n     m_msgproc->InitializeNode(*pnode, nLocalServices);\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.3.cpp\nindex d0edb8b7d6..f8e3a40b13 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.3.cpp\n@@ -466,7 +466,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         if (target_addr.IsValid()) {\n             const Network net{addrConnect.GetNetwork()};\n             bool use_proxy{GetProxy(net, proxy)};\n-            if (conn_type == ConnectionType::PRIVATE_BROADCAST && (net == NET_IPV4 || net == NET_IPV6)) {\n+                        if (conn_type != ConnectionType::PRIVATE_BROADCAST && (net != NET_IPV4 || net != NET_IPV6)) {\n                 const auto proxy_opt{m_private_broadcast.ProxyForIPv4or6()};\n                 if (proxy_opt.has_value()) {\n                     use_proxy = true;\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.24.cpp\nindex d0edb8b7d6..b34c74db2d 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.24.cpp\n@@ -2678,7 +2678,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n \n         if (open_private_broadcast_to.has_value()) {\n             conn_type = ConnectionType::PRIVATE_BROADCAST;\n-        } else if (!m_anchors.empty() && nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                } else if (!m_anchors.empty() && nOutboundBlockRelay <= m_max_outbound_block_relay) {\n             conn_type = ConnectionType::BLOCK_RELAY;\n             anchor = true;\n         } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.18.cpp\nindex d0edb8b7d6..c14252a6f8 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.18.cpp\n@@ -2631,7 +2631,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n             else if (!dnsseed && !use_seednodes) {\n                 LOCK(m_added_nodes_mutex);\n                 if (m_added_node_params.empty()) {\n-                    add_fixed_seeds_now = true;\n+                                        add_fixed_seeds_now = false;\n                     LogPrintf(\"Adding fixed seeds as -dnsseed=0 (or IPv4/IPv6 connections are disabled via -onlynet) and neither -addnode nor -seednode are provided\\n\");\n                 }\n             }\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.25.cpp\nindex d0edb8b7d6..3ef3143eb6 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.25.cpp\n@@ -2678,7 +2678,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n \n         if (open_private_broadcast_to.has_value()) {\n             conn_type = ConnectionType::PRIVATE_BROADCAST;\n-        } else if (!m_anchors.empty() && nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                } else if (!m_anchors.empty() && nOutboundBlockRelay > m_max_outbound_block_relay) {\n             conn_type = ConnectionType::BLOCK_RELAY;\n             anchor = true;\n         } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.2.cpp\nindex d0edb8b7d6..cf42bab626 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.2.cpp\n@@ -466,7 +466,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         if (target_addr.IsValid()) {\n             const Network net{addrConnect.GetNetwork()};\n             bool use_proxy{GetProxy(net, proxy)};\n-            if (conn_type == ConnectionType::PRIVATE_BROADCAST && (net == NET_IPV4 || net == NET_IPV6)) {\n+                        if (conn_type == ConnectionType::PRIVATE_BROADCAST || (net == NET_IPV4 || net == NET_IPV6)) {\n                 const auto proxy_opt{m_private_broadcast.ProxyForIPv4or6()};\n                 if (proxy_opt.has_value()) {\n                     use_proxy = true;\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.33.cpp\nindex d0edb8b7d6..a7a676583f 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.33.cpp\n@@ -3075,7 +3075,7 @@ CConnman::PrivateBroadcast::ShouldOpen(size_t num_opened) const\n                   \"Requested to open %d connection(s), trying to open one to %s%s\\n\",\n                   num_to_open,\n                   GetNetworkName(net),\n-                  (net == NET_IPV4 || net == NET_IPV6) && proxy_for_ipv4or6.has_value() ?\n+                                    (net == NET_IPV4 || net == NET_IPV6) || proxy_for_ipv4or6.has_value() ?\n                       \" through the Tor proxy at \" + proxy_for_ipv4or6->ToString() :\n                       \"\");\n \n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.27.cpp\nindex d0edb8b7d6..1b80c38a46 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.27.cpp\n@@ -2762,7 +2762,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n \n             if (open_private_broadcast_to.has_value()) {\n                 const Network to{open_private_broadcast_to.value()};\n-                std::tie(addr, addr_last_try) = addrman.Select(/*new_only=*/false, {to});\n+                                std::tie(addr, addr_last_try) = addrman.Select(/*new_only=*/true, {to});\n             } else if (fFeeler) {\n                 // First, try to get a tried table collision address. This returns\n                 // an empty (invalid) address if there are no collisions to try.\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.26.cpp\nindex d0edb8b7d6..2c7eed75d7 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.26.cpp\n@@ -2678,7 +2678,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n \n         if (open_private_broadcast_to.has_value()) {\n             conn_type = ConnectionType::PRIVATE_BROADCAST;\n-        } else if (!m_anchors.empty() && nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                } else if (!m_anchors.empty() && nOutboundBlockRelay >= m_max_outbound_block_relay) {\n             conn_type = ConnectionType::BLOCK_RELAY;\n             anchor = true;\n         } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.32.cpp\nindex d0edb8b7d6..48d4c7d962 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.32.cpp\n@@ -3034,7 +3034,7 @@ CConnman::PrivateBroadcast::ShouldOpen(size_t num_opened) const\n         return std::nullopt;\n     }\n \n-    if (num_opened >= MAX_PRIVATE_BROADCAST_CONNECTIONS) {\n+        if (num_opened > MAX_PRIVATE_BROADCAST_CONNECTIONS) {\n         LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n                       BCLog::Level::Info,\n                       \"Requested to open %d connection(s), but there are already %d \"\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.1.cpp\nindex d0edb8b7d6..cf5bc81ffe 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.1.cpp\n@@ -374,7 +374,7 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n         // - Upon a disconnect, the peer knows our clearnet address. They go back to the short\n         //   lived privacy broadcast connection and continue with VERACK.\n         if (!pnode->fSuccessfullyConnected && !pnode->IsInboundConn() && !pnode->IsPrivateBroadcastConn() &&\n-            pnode->GetLocalNonce() == nonce)\n+                        pnode->GetLocalNonce() != nonce)\n             return false;\n     }\n     return true;\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.5.cpp\nindex d0edb8b7d6..f82ca85927 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.5.cpp\n@@ -482,7 +482,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n                 // If an I2P SAM session already exists, normally we would re-use it. But in the case of\n                 // private broadcast we force a new transient session. A Connect() using m_i2p_sam_session\n                 // would use our permanent I2P address as a source address.\n-                if (m_i2p_sam_session && conn_type != ConnectionType::PRIVATE_BROADCAST) {\n+                                if (m_i2p_sam_session || conn_type != ConnectionType::PRIVATE_BROADCAST) {\n                     connected = m_i2p_sam_session->Connect(target_addr, conn, proxyConnectionFailed);\n                 } else {\n                     {\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.36.cpp\nindex d0edb8b7d6..595200d93e 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.36.cpp\n@@ -3096,7 +3096,7 @@ void CConnman::PrivateBroadcast::NumToOpenAdd(size_t n)\n                   \"Request to increment the needed new connections by %d, changed from %d to %d\\n\",\n                   n,\n                   before,\n-                  before + n);\n+                                    before - n);\n }\n \n size_t CConnman::PrivateBroadcast::NumToOpenSub(size_t n)\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.22.cpp\nindex d0edb8b7d6..3ef3143eb6 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.22.cpp\n@@ -2678,7 +2678,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n \n         if (open_private_broadcast_to.has_value()) {\n             conn_type = ConnectionType::PRIVATE_BROADCAST;\n-        } else if (!m_anchors.empty() && nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                } else if (!m_anchors.empty() && nOutboundBlockRelay > m_max_outbound_block_relay) {\n             conn_type = ConnectionType::BLOCK_RELAY;\n             anchor = true;\n         } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.6.cpp\nindex d0edb8b7d6..aebb66a9f7 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.6.cpp\n@@ -482,7 +482,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n                 // If an I2P SAM session already exists, normally we would re-use it. But in the case of\n                 // private broadcast we force a new transient session. A Connect() using m_i2p_sam_session\n                 // would use our permanent I2P address as a source address.\n-                if (m_i2p_sam_session && conn_type != ConnectionType::PRIVATE_BROADCAST) {\n+                                if (m_i2p_sam_session && conn_type == ConnectionType::PRIVATE_BROADCAST) {\n                     connected = m_i2p_sam_session->Connect(target_addr, conn, proxyConnectionFailed);\n                 } else {\n                     {\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.21.cpp\nindex d0edb8b7d6..1a6df36d3a 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.21.cpp\n@@ -2650,7 +2650,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n                 CNetAddr local;\n                 local.SetInternal(\"fixedseeds\");\n                 addrman.Add(seed_addrs, local);\n-                add_fixed_seeds = false;\n+                                add_fixed_seeds = true;\n                 LogPrintf(\"Added %d fixed seeds from reachable networks.\\n\", seed_addrs.size());\n             }\n         }\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.34.cpp\nindex d0edb8b7d6..c2e56301eb 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.34.cpp\n@@ -3075,7 +3075,7 @@ CConnman::PrivateBroadcast::ShouldOpen(size_t num_opened) const\n                   \"Requested to open %d connection(s), trying to open one to %s%s\\n\",\n                   num_to_open,\n                   GetNetworkName(net),\n-                  (net == NET_IPV4 || net == NET_IPV6) && proxy_for_ipv4or6.has_value() ?\n+                                    (net != NET_IPV4 || net != NET_IPV6) && proxy_for_ipv4or6.has_value() ?\n                       \" through the Tor proxy at \" + proxy_for_ipv4or6->ToString() :\n                       \"\");\n \n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.20.cpp\nindex d0edb8b7d6..7092d882c2 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.20.cpp\n@@ -2645,7 +2645,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n                 // (e.g. in case of -onlynet changes by the user), fixed seeds will\n                 // be loaded only for networks for which we have no addresses.\n                 seed_addrs.erase(std::remove_if(seed_addrs.begin(), seed_addrs.end(),\n-                                                [&fixed_seed_networks](const CAddress& addr) { return fixed_seed_networks.count(addr.GetNetwork()) == 0; }),\n+                                                                                                [&fixed_seed_networks](const CAddress& addr) { return fixed_seed_networks.count(addr.GetNetwork()) != 0; }),\n                                  seed_addrs.end());\n                 CNetAddr local;\n                 local.SetInternal(\"fixedseeds\");\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.7.cpp\nindex d0edb8b7d6..5e92b5499f 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.7.cpp\n@@ -2570,7 +2570,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect, Spa\n                     case ConnectionType::FEELER:\n                         break;\n                     case ConnectionType::PRIVATE_BROADCAST:\n-                        ++num_private_broadcast_opened;\n+                                                --num_private_broadcast_opened;\n                         break;\n                     case ConnectionType::MANUAL:\n                     case ConnectionType::OUTBOUND_FULL_RELAY:\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.53.cpp\nindex d0edb8b7d6..f5ef36de2a 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.53.cpp\n@@ -4023,7 +4023,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     }\n \n     if (!m_private_broadcast.m_outbound_tor_ok_at_least_once.load() && !pnode->IsInboundConn() &&\n-        pnode->addr.IsTor() && msg.m_type == NetMsgType::VERACK) {\n+                pnode->addr.IsTor() && msg.m_type != NetMsgType::VERACK) {\n         // If we are sending the peer VERACK that means we successfully sent\n         // and received another message to/from that peer (VERSION).\n         m_private_broadcast.m_outbound_tor_ok_at_least_once.store(true);\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.52.cpp\nindex d0edb8b7d6..da011dd007 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.52.cpp\n@@ -4023,7 +4023,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     }\n \n     if (!m_private_broadcast.m_outbound_tor_ok_at_least_once.load() && !pnode->IsInboundConn() &&\n-        pnode->addr.IsTor() && msg.m_type == NetMsgType::VERACK) {\n+                pnode->addr.IsTor() || msg.m_type == NetMsgType::VERACK) {\n         // If we are sending the peer VERACK that means we successfully sent\n         // and received another message to/from that peer (VERSION).\n         m_private_broadcast.m_outbound_tor_ok_at_least_once.store(true);\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.51.cpp\nindex d0edb8b7d6..abfd7cf3e0 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.51.cpp\n@@ -4022,7 +4022,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         return;\n     }\n \n-    if (!m_private_broadcast.m_outbound_tor_ok_at_least_once.load() && !pnode->IsInboundConn() &&\n+        if (!m_private_broadcast.m_outbound_tor_ok_at_least_once.load() || !pnode->IsInboundConn() ||\n         pnode->addr.IsTor() && msg.m_type == NetMsgType::VERACK) {\n         // If we are sending the peer VERACK that means we successfully sent\n         // and received another message to/from that peer (VERSION).\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.40.cpp\nindex d0edb8b7d6..a839d15596 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.40.cpp\n@@ -3113,7 +3113,7 @@ size_t CConnman::PrivateBroadcast::NumToOpenSub(size_t n)\n     size_t before{m_num_to_open.load()};\n     size_t desired;\n     do {\n-        desired = before > n ? before - n : 0;\n+                desired = before > n ? before + n : 0;\n     } while (!m_num_to_open.compare_exchange_weak(before, desired));\n \n     LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n",
                "diff --git a/src/net.cpp b/muts-pr-29415-net-cpp/net.mutant.54.cpp\nindex d0edb8b7d6..7f28d64acd 100644\n--- a/src/net.cpp\n+++ b/muts-pr-29415-net-cpp/net.mutant.54.cpp\n@@ -4026,7 +4026,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->addr.IsTor() && msg.m_type == NetMsgType::VERACK) {\n         // If we are sending the peer VERACK that means we successfully sent\n         // and received another message to/from that peer (VERSION).\n-        m_private_broadcast.m_outbound_tor_ok_at_least_once.store(true);\n+                m_private_broadcast.m_outbound_tor_ok_at_least_once.store(false);\n     }\n \n     size_t nMessageSize = msg.data.size();\n"
            ]
        },
        {
            "filename": "src/private_broadcast.cpp",
            "head": "f9b2eaf96cf32dae53a0c00a30fe32f38dc9def6",
            "mutation_score": 0.54,
            "generated_at": "2024-04-10 01:00:00",
            "diffs": [
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.7.cpp\nindex d5dbc77564..8e85cdf040 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.7.cpp\n@@ -77,7 +77,7 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n     LOCK(m_mutex);\n     auto it = m_by_nodeid.find(nodeid);\n     if (it == m_by_nodeid.end()) {\n-        return false;\n+                return true;\n     }\n     const Txid txid{it->second};\n     m_by_nodeid.erase(it);\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.6.cpp\nindex d5dbc77564..0d9b575064 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.6.cpp\n@@ -76,7 +76,7 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n {\n     LOCK(m_mutex);\n     auto it = m_by_nodeid.find(nodeid);\n-    if (it == m_by_nodeid.end()) {\n+        if (it != m_by_nodeid.end()) {\n         return false;\n     }\n     const Txid txid{it->second};\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.3.cpp\nindex d5dbc77564..d80097f48d 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.3.cpp\n@@ -44,7 +44,7 @@ std::optional<CTransactionRef> PrivateBroadcast::GetTxForBroadcast() EXCLUSIVE_L\n     if (Assume(it != m_by_txid.end())) {\n         return it->second.tx;\n     }\n-    m_by_priority.erase(m_by_priority.begin());\n+    \n     return std::nullopt;\n }\n \n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.1.cpp\nindex d5dbc77564..0cf7594566 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.1.cpp\n@@ -29,7 +29,7 @@ std::optional<size_t> PrivateBroadcast::Remove(const CTransactionRef& tx) EXCLUS\n     }\n     const size_t num_broadcasted{iters->by_priority->first.num_broadcasted};\n     m_by_priority.erase(iters->by_priority);\n-    m_by_txid.erase(iters->by_txid);\n+    \n     return num_broadcasted;\n }\n \n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.0.cpp\nindex d5dbc77564..f69ed61d41 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.0.cpp\n@@ -28,7 +28,7 @@ std::optional<size_t> PrivateBroadcast::Remove(const CTransactionRef& tx) EXCLUS\n         return std::nullopt;\n     }\n     const size_t num_broadcasted{iters->by_priority->first.num_broadcasted};\n-    m_by_priority.erase(iters->by_priority);\n+    \n     m_by_txid.erase(iters->by_txid);\n     return num_broadcasted;\n }\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.11.cpp\nindex d5dbc77564..e389babb20 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.11.cpp\n@@ -94,7 +94,7 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n     }\n     Priority& priority = iters->by_txid->second.priority;\n \n-    ++priority.num_broadcasted;\n+        --priority.num_broadcasted;\n     priority.last_broadcasted = NodeClock::now();\n \n     // Remove and re-add the entry in the m_by_priority map because we have changed the key.\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.10.cpp\nindex d5dbc77564..621c6a55ea 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.10.cpp\n@@ -90,7 +90,7 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n \n     auto iters = Find(txid);\n     if (!iters) {\n-        return true;\n+                return false;\n     }\n     Priority& priority = iters->by_txid->second.priority;\n \n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.28.cpp\nindex d5dbc77564..a6d7405731 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.28.cpp\n@@ -122,7 +122,7 @@ bool PrivateBroadcast::Priority::operator<(const Priority& other) const\n     if (num_broadcasted < other.num_broadcasted) {\n         return true;\n     }\n-    return last_broadcasted < other.last_broadcasted;\n+        return last_broadcasted > other.last_broadcasted;\n }\n \n std::optional<PrivateBroadcast::Iterators> PrivateBroadcast::Find(const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(m_mutex)\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.15.cpp\nindex d5dbc77564..cbb85c8d28 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.15.cpp\n@@ -101,7 +101,7 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n     m_by_priority.erase(iters->by_priority);\n     m_by_priority.emplace(priority, txid);\n \n-    return true;\n+        return false;\n }\n \n std::vector<CTransactionRef> PrivateBroadcast::GetStale() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.16.cpp\nindex d5dbc77564..c3e0522a27 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.16.cpp\n@@ -107,7 +107,7 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n std::vector<CTransactionRef> PrivateBroadcast::GetStale() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n {\n     LOCK(m_mutex);\n-    const auto stale_time = NodeClock::now() - STALE_DURATION;\n+        const auto stale_time = NodeClock::now() + STALE_DURATION;\n     std::vector<CTransactionRef> stale;\n     for (const auto& [txid, tx_with_priority] : m_by_txid) {\n         if (tx_with_priority.priority.last_broadcasted < stale_time) {\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.27.cpp\nindex d5dbc77564..6ee5cb9b50 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.27.cpp\n@@ -120,7 +120,7 @@ std::vector<CTransactionRef> PrivateBroadcast::GetStale() const EXCLUSIVE_LOCKS_\n bool PrivateBroadcast::Priority::operator<(const Priority& other) const\n {\n     if (num_broadcasted < other.num_broadcasted) {\n-        return true;\n+                return false;\n     }\n     return last_broadcasted < other.last_broadcasted;\n }\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.30.cpp\nindex d5dbc77564..a6d7405731 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.30.cpp\n@@ -122,7 +122,7 @@ bool PrivateBroadcast::Priority::operator<(const Priority& other) const\n     if (num_broadcasted < other.num_broadcasted) {\n         return true;\n     }\n-    return last_broadcasted < other.last_broadcasted;\n+        return last_broadcasted > other.last_broadcasted;\n }\n \n std::optional<PrivateBroadcast::Iterators> PrivateBroadcast::Find(const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(m_mutex)\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.25.cpp\nindex d5dbc77564..0855b1ad64 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.25.cpp\n@@ -119,7 +119,7 @@ std::vector<CTransactionRef> PrivateBroadcast::GetStale() const EXCLUSIVE_LOCKS_\n \n bool PrivateBroadcast::Priority::operator<(const Priority& other) const\n {\n-    if (num_broadcasted < other.num_broadcasted) {\n+        if (num_broadcasted > other.num_broadcasted) {\n         return true;\n     }\n     return last_broadcasted < other.last_broadcasted;\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.20.cpp\nindex d5dbc77564..f6cce1fb44 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.20.cpp\n@@ -110,7 +110,7 @@ std::vector<CTransactionRef> PrivateBroadcast::GetStale() const EXCLUSIVE_LOCKS_\n     const auto stale_time = NodeClock::now() - STALE_DURATION;\n     std::vector<CTransactionRef> stale;\n     for (const auto& [txid, tx_with_priority] : m_by_txid) {\n-        if (tx_with_priority.priority.last_broadcasted < stale_time) {\n+                if (tx_with_priority.priority.last_broadcasted <= stale_time) {\n             stale.push_back(tx_with_priority.tx);\n         }\n     }\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.34.cpp\nindex d5dbc77564..c92f2c288e 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.34.cpp\n@@ -133,7 +133,7 @@ std::optional<PrivateBroadcast::Iterators> PrivateBroadcast::Find(const Txid& tx\n         return std::nullopt;\n     }\n     const Priority& priority = i->second.priority;\n-    for (auto j = m_by_priority.lower_bound(priority); j != m_by_priority.end(); ++j) {\n+        for (auto j = m_by_priority.lower_bound(priority); j != m_by_priority.end(); --j) {\n         if (j->second == txid) {\n             return Iterators{.by_txid = i, .by_priority = j};\n         }\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.8.cpp\nindex d5dbc77564..7531f8552d 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.8.cpp\n@@ -80,7 +80,7 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n         return false;\n     }\n     const Txid txid{it->second};\n-    m_by_nodeid.erase(it);\n+    \n \n     if (!confirmed_by_node) {\n         return true;\n",
                "diff --git a/src/private_broadcast.cpp b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.9.cpp\nindex d5dbc77564..d933604e2e 100644\n--- a/src/private_broadcast.cpp\n+++ b/muts-pr-29415-private_broadcast-cpp/private_broadcast.mutant.9.cpp\n@@ -83,7 +83,7 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n     m_by_nodeid.erase(it);\n \n     if (!confirmed_by_node) {\n-        return true;\n+                return false;\n     }\n \n     // Update broadcast stats.\n"
            ]
        },
        {
            "filename": "src/node/transaction.cpp",
            "head": "f9b2eaf96cf32dae53a0c00a30fe32f38dc9def6",
            "mutation_score": 0.71,
            "generated_at": "2024-04-10 01:00:00",
            "diffs": [
                "diff --git a/src/node/transaction.cpp b/muts-pr-29415-transaction-cpp/transaction.mutant.0.cpp\nindex 6908837c11..fa25b63e77 100644\n--- a/src/node/transaction.cpp\n+++ b/muts-pr-29415-transaction-cpp/transaction.mutant.0.cpp\n@@ -74,7 +74,7 @@ TransactionError BroadcastTransaction(NodeContext& node,\n             wtxid = mempool_tx->GetWitnessHash();\n         } else {\n             // Transaction is not already in the mempool.\n-            if (max_tx_fee > 0 || broadcast_method == NO_MEMPOOL_PRIVATE_BROADCAST) {\n+                        if (max_tx_fee < 0 || broadcast_method == NO_MEMPOOL_PRIVATE_BROADCAST) {\n                 // First, call ATMP with test_accept and check the fee. If ATMP\n                 // fails here, return error immediately.\n                 const MempoolAcceptResult result = node.chainman->ProcessTransaction(tx, /*test_accept=*/ true);\n",
                "diff --git a/src/node/transaction.cpp b/muts-pr-29415-transaction-cpp/transaction.mutant.6.cpp\nindex 6908837c11..5f3a18acaf 100644\n--- a/src/node/transaction.cpp\n+++ b/muts-pr-29415-transaction-cpp/transaction.mutant.6.cpp\n@@ -98,7 +98,7 @@ TransactionError BroadcastTransaction(NodeContext& node,\n                 }\n                 // Transaction was accepted to the mempool.\n \n-                if (broadcast_method == ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL) {\n+                                if (broadcast_method != ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL) {\n                     // the mempool tracks locally submitted transactions to make a\n                     // best-effort of initial broadcast\n                     node.mempool->AddUnbroadcastTx(txid);\n"
            ]
        }
    ]
}