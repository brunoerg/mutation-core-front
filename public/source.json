[
    {
      "filename": "src/wallet/coinselection.cpp",
      "diffs": [
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.88.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..2404bb37cb\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.88.py\n@@ -687,7 +687,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n \n         # Upon restart, the node must stay in 'limited' mode until the background\n         # chain sync completes.\n-        self.restart_node(2, extra_args=self.extra_args[2])\n+        \n         self.assert_only_network_limited_service(n2)\n \n         self.connect_nodes(0, 2)\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.87.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..e6acbd849c\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.87.py\n@@ -673,7 +673,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n             assert_equal(loaded['coins_loaded'], SNAPSHOT_BASE_HEIGHT)\n             assert_equal(loaded['base_height'], SNAPSHOT_BASE_HEIGHT)\n \n-        normal, snapshot = n2.getchainstates()['chainstates']\n+        \n         assert_equal(normal['blocks'], START_HEIGHT)\n         assert_equal(normal.get('snapshot_blockhash'), None)\n         assert_equal(normal['validated'], True)\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.74.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..5585ff70fa\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.74.py\n@@ -551,7 +551,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n         # point, it winds up in m_blocks_unlinked and triggers a corner case\n         # that previously crashed CheckBlockIndex.\n         n1.submitblock(stale_block)\n-        n1.getchaintips()\n+        \n         n1.getblock(stale_hash)\n \n         self.log.info(\"Submit a spending transaction for a snapshot chainstate coin to the mempool\")\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.93.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..edafcadcf8\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.93.py\n@@ -714,7 +714,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n \n             assert_equal(n.getblockchaininfo()[\"blocks\"], FINAL_HEIGHT)\n \n-            chainstate, = n.getchainstates()['chainstates']\n+            \n             assert_equal(chainstate['blocks'], FINAL_HEIGHT)\n \n             if i != 0:\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.54.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..e800c194e3\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.54.py\n@@ -319,7 +319,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n         # Now that the snapshot_node is synced, verify the ibd_node can sync from it\n         self.connect_nodes(snapshot_node.index, ibd_node.index)\n         assert 'NETWORK' in ibd_node.getpeerinfo()[0]['servicesnames']\n-        self.sync_blocks(nodes=(ibd_node, snapshot_node))\n+        \n \n     def assert_only_network_limited_service(self, node):\n         node_services = node.getnetworkinfo()['localservicesnames']\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.15.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..d4a829f863\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.15.py\n@@ -127,7 +127,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n         cases = [\n             # (content, offset, wrong_hash, custom_message)\n             [b\"\\xff\" * 32, 0, \"7d52155c9a9fdc4525b637ef6170568e5dad6fabd0b1fdbb9432010b8453095b\", None],  # wrong outpoint hash\n-            [(2).to_bytes(1, \"little\"), 32, None, \"Bad snapshot data after deserializing 1 coins.\"],  # wrong txid coins count\n+            \n             [b\"\\xfd\\xff\\xff\", 32, None, \"Mismatch in coins count in snapshot metadata and actual snapshot data\"],  # txid coins count exceeds coins left\n             [b\"\\x01\", 33, \"9f4d897031ab8547665b4153317ae2fdbf0130c7840b66427ebc48b881cb80ad\", None],  # wrong outpoint index\n             [b\"\\x81\", 34, \"3da966ba9826fb6d2604260e01607b55ba44e1a5de298606b08704bc62570ea8\", None],  # wrong coin code VARINT\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.82.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..f687d31b92\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.82.py\n@@ -633,7 +633,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n         for i in (0, 1):\n             n = self.nodes[i]\n             self.log.info(f\"Restarting node {i} to ensure (Check|Load)BlockIndex passes\")\n-            self.restart_node(i, extra_args=self.extra_args[i])\n+            \n \n             assert_equal(n.getblockchaininfo()[\"blocks\"], FINAL_HEIGHT)\n \n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.33.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..0921a89c78\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.33.py\n@@ -244,7 +244,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n         parent_block_hash = node0.getblockhash(SNAPSHOT_BASE_HEIGHT - 1)\n         block_time = node0.getblock(node0.getbestblockhash())['time'] + 1\n         fork_block1 = create_block(int(parent_block_hash, 16), create_coinbase(SNAPSHOT_BASE_HEIGHT), block_time)\n-        fork_block1.solve()\n+        \n         fork_block2 = create_block(fork_block1.sha256, create_coinbase(SNAPSHOT_BASE_HEIGHT + 1), block_time + 1)\n         fork_block2.solve()\n         node1.submitheader(fork_block1.serialize().hex())\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.52.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..fefc760a60\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.52.py\n@@ -311,7 +311,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n         # Now disconnect nodes and finish background chain sync\n         self.disconnect_nodes(ibd_node.index, snapshot_node.index)\n         self.connect_nodes(snapshot_node.index, miner.index)\n-        self.sync_blocks(nodes=(miner, snapshot_node))\n+        \n         # Check the base snapshot block was stored and ensure node signals full-node service support\n         self.wait_until(lambda: not try_rpc(-1, \"Block not available (not fully downloaded)\", snapshot_node.getblock, snapshot_block_hash))\n         self.wait_until(lambda: 'NETWORK' in snapshot_node.getnetworkinfo()['localservicesnames'])\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.95.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..56940ff20d\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.95.py\n@@ -729,7 +729,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n \n         self.log.info(\"Test -reindex of an assumeutxo-synced node\")\n         self.restart_node(2, extra_args=['-reindex=1', *self.extra_args[2]])\n-        self.connect_nodes(0, 2)\n+        \n         self.wait_until(lambda: n2.getblockcount() == FINAL_HEIGHT)\n \n         self.test_snapshot_in_a_divergent_chain(dump_output['path'])\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.94.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..14e469cf11\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.94.py\n@@ -728,7 +728,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n         self.wait_until(lambda: n2.getblockcount() == FINAL_HEIGHT)\n \n         self.log.info(\"Test -reindex of an assumeutxo-synced node\")\n-        self.restart_node(2, extra_args=['-reindex=1', *self.extra_args[2]])\n+        \n         self.connect_nodes(0, 2)\n         self.wait_until(lambda: n2.getblockcount() == FINAL_HEIGHT)\n \n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.90.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..cfd7b495c1\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.90.py\n@@ -692,7 +692,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n \n         self.connect_nodes(0, 2)\n         self.wait_until(lambda: n2.getchainstates()['chainstates'][-1]['blocks'] == FINAL_HEIGHT)\n-        self.sync_blocks(nodes=(n0, n2))\n+        \n \n         self.log.info(\"Ensuring background validation completes\")\n         self.wait_until(lambda: len(n2.getchainstates()['chainstates']) == 1)\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.63.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..957236fd5f\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.63.py\n@@ -363,7 +363,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n                 temp_invalid = n0.getbestblockhash()\n                 n0.invalidateblock(temp_invalid)\n                 stale_hash = self.generateblock(n0, output=\"raw(aaaa)\", transactions=[], sync_fun=self.no_op)[\"hash\"]\n-                n0.invalidateblock(stale_hash)\n+                \n                 n0.reconsiderblock(temp_invalid)\n                 stale_block = n0.getblock(stale_hash, 0)\n \n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.32.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..7ec72630ff\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.32.py\n@@ -231,7 +231,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n \n         # Now lets sync the nodes and wait for the background validation to finish\n         self.connect_nodes(0, 3)\n-        self.sync_blocks(nodes=(n0, n3))\n+        \n         self.wait_until(lambda: len(n3.getchainstates()['chainstates']) == 1)\n \n     def test_snapshot_not_on_most_work_chain(self, dump_output_path):\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.80.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..28a97ec181\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.80.py\n@@ -611,7 +611,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n \n         self.log.info(f\"Ensuring snapshot chain syncs to tip. ({FINAL_HEIGHT})\")\n         self.wait_until(lambda: n1.getchainstates()['chainstates'][-1]['blocks'] == FINAL_HEIGHT)\n-        self.sync_blocks(nodes=(n0, n1))\n+        \n \n         self.log.info(\"Ensuring background validation completes\")\n         self.wait_until(lambda: len(n1.getchainstates()['chainstates']) == 1)\n",
        "diff --git a/test/functional/feature_assumeutxo.py b/muts/feature_assumeutxo.mutant.49.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..8e08e8a179\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts/feature_assumeutxo.mutant.49.py\n@@ -305,7 +305,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n         # If it does request such blocks, the snapshot_node will ignore requests it cannot fulfill, causing the ibd_node\n         # to stall. This stall could last for up to 10 min, ultimately resulting in an abrupt disconnection due to the\n         # ibd_node's perceived unresponsiveness.\n-        time.sleep(3)  # Sleep here because we can't detect when a node avoids requesting blocks from other peer.\n+        \n         assert_equal(len(ibd_node.getpeerinfo()[0]['inflight']), 0)\n \n         # Now disconnect nodes and finish background chain sync\n"
      ]
    }
  ]