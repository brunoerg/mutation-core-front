[
  {
    "filename": "feature_assumeutxo.py",
    "diffs": [
      "diff --git a/test/functional/feature_assumeutxo.py b/muts-feature_assumeutxo-py/feature_assumeutxo.mutant.38.py\nold mode 100755\nnew mode 100644\nindex 2995ece42f..957236fd5f\n--- a/test/functional/feature_assumeutxo.py\n+++ b/muts-feature_assumeutxo-py/feature_assumeutxo.mutant.38.py\n@@ -363,7 +363,7 @@ class AssumeutxoTest(BitcoinTestFramework):\n                 temp_invalid = n0.getbestblockhash()\n                 n0.invalidateblock(temp_invalid)\n                 stale_hash = self.generateblock(n0, output=\"raw(aaaa)\", transactions=[], sync_fun=self.no_op)[\"hash\"]\n-                n0.invalidateblock(stale_hash)\n+                \n                 n0.reconsiderblock(temp_invalid)\n                 stale_block = n0.getblock(stale_hash, 0)\n \n"
    ]
  },
  {
    "filename": "p2p_segwit.py",
    "diffs": [
      "diff --git a/test/functional/p2p_segwit.py b/muts/p2p_segwit.mutant.364.py\nold mode 100755\nnew mode 100644\nindex 9be53d2ab8..ce2c5b8ff8\n--- a/test/functional/p2p_segwit.py\n+++ b/muts/p2p_segwit.mutant.364.py\n@@ -1572,7 +1572,7 @@ class SegWitTest(BitcoinTestFramework):\n                                           'but finished with a false/empty top stack element')\n \n                 # Too-small input value\n-                sign_p2pk_witness_input(witness_script, tx, 0, hashtype, prev_utxo.nValue - 1, key)\n+                \n                 block.vtx.pop()  # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n                 test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n\n\n",
      "diff --git a/test/functional/p2p_segwit.py b/muts/p2p_segwit.mutant.224.py\nold mode 100755\nnew mode 100644\nindex 9be53d2ab8..c1c0ef3054\n--- a/test/functional/p2p_segwit.py\n+++ b/muts/p2p_segwit.mutant.224.py\n@@ -1071,7 +1071,7 @@ class SegWitTest(BitcoinTestFramework):\n         tx2.wit.vtxinwit.append(CTxInWitness())\n         # First try a 521-byte stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a' * (MAX_SCRIPT_ELEMENT_SIZE + 1), witness_script]\n-        tx2.rehash()\n+        \n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n\n",
      "diff --git a/test/functional/p2p_segwit.py b/muts/p2p_segwit.mutant.63.py\nold mode 100755\nnew mode 100644\nindex 9be53d2ab8..89ba54f9e3\n--- a/test/functional/p2p_segwit.py\n+++ b/muts/p2p_segwit.mutant.63.py\n@@ -493,7 +493,7 @@ class SegWitTest(BitcoinTestFramework):\n         p2sh_p2wsh_tx.vin = [CTxIn(COutPoint(txid, 1), CScript([script_pubkey]))]\n         p2sh_p2wsh_tx.vout = [CTxOut(value, CScript([OP_TRUE]))]\n         p2sh_p2wsh_tx.wit.vtxinwit.append(CTxInWitness())\n-        p2sh_p2wsh_tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        \n         p2sh_p2wsh_tx.rehash()\n \n         for tx in [p2wsh_tx, p2sh_p2wsh_tx]:\n\n\n"
    ]
  },
  {
    "filename": "interface_rest.py",
    "diffs": [
      "diff --git a/test/functional/interface_rest.py b/muts/interface_rest.mutant.10.py\nold mode 100755\nnew mode 100644\nindex ba6e960476..c07f95c4c7\n--- a/test/functional/interface_rest.py\n+++ b/muts/interface_rest.mutant.10.py\n@@ -158,7 +158,7 @@ class RESTTest (BitcoinTestFramework):\n         bin_request = b'\\x01\\x02'\n         for txid, n in [spending, spent]:\n             bin_request += bytes.fromhex(txid)\n-            bin_request += n.to_bytes(4, 'little')\n+            \n \n         bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n         chain_height = int.from_bytes(bin_response[0:4], 'little')\n"
    ]  
  },
  {
    "filename": "mempool_package_rbf.py",
    "diffs": [
      "diff --git a/test/functional/mempool_package_rbf.py b/muts/mempool_package_rbf.mutant.61.py\nold mode 100755\nnew mode 100644\nindex f4d57262f2..ab7fa19867\n--- a/test/functional/mempool_package_rbf.py\n+++ b/muts/mempool_package_rbf.mutant.61.py\n@@ -556,7 +556,7 @@ class PackageRBFTest(BitcoinTestFramework):\n     def test_child_conflicts_parent_mempool_ancestor(self):\n         fill_mempool(self, self.nodes[0])\n         # Reset coins since we filled the mempool with current coins\n-        self.coins = self.wallet.get_utxos(mark_as_spent=False, confirmed_only=True)\n+        \n \n         self.log.info(\"Test that package RBF doesn't have issues with mempool<->package conflicts via inconsistency\")\n         node = self.nodes[0]\n"
    ]
  },
  {
    "filename": "p2p_compactblocks.py",
    "diffs": [
      "diff --git a/test/functional/p2p_compactblocks.py b/muts-p2p_compactblocks-py/p2p_compactblocks.mutant.73.py\nold mode 100755\nnew mode 100644\nindex 49cf26d425..e3e2510995\n--- a/test/functional/p2p_compactblocks.py\n+++ b/muts-p2p_compactblocks-py/p2p_compactblocks.mutant.73.py\n@@ -726,7 +726,7 @@ class CompactBlocksTest(BitcoinTestFramework):\n         del block.vtx[3]\n         block.hashMerkleRoot = block.calc_merkle_root()\n         # Drop the coinbase witness but include the witness commitment.\n-        add_witness_commitment(block)\n+        \n         block.vtx[0].wit.vtxinwit = []\n         block.solve()\n \n",
      "diff --git a/test/functional/p2p_compactblocks.py b/muts-p2p_compactblocks-py/p2p_compactblocks.mutant.75.py\nold mode 100755\nnew mode 100644\nindex 49cf26d425..03eb05d271\n--- a/test/functional/p2p_compactblocks.py\n+++ b/muts-p2p_compactblocks-py/p2p_compactblocks.mutant.75.py\n@@ -746,7 +746,7 @@ class CompactBlocksTest(BitcoinTestFramework):\n     def request_cb_announcements(self, peer):\n         node = self.nodes[0]\n         tip = node.getbestblockhash()\n-        peer.get_headers(locator=[int(tip, 16)], hashstop=0)\n+        \n         peer.send_and_ping(msg_sendcmpct(announce=True, version=2))\n \n     def test_compactblock_reconstruction_stalling_peer(self, stalling_peer, delivery_peer):\n"
    ]
  }
]